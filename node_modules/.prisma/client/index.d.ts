
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model UserGame
 * 
 */
export type UserGame = $Result.DefaultSelection<Prisma.$UserGamePayload>
/**
 * Model League
 * 
 */
export type League = $Result.DefaultSelection<Prisma.$LeaguePayload>
/**
 * Model LeagueSetting
 * 
 */
export type LeagueSetting = $Result.DefaultSelection<Prisma.$LeagueSettingPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamStanding
 * 
 */
export type TeamStanding = $Result.DefaultSelection<Prisma.$TeamStandingPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model TeamPlayer
 * 
 */
export type TeamPlayer = $Result.DefaultSelection<Prisma.$TeamPlayerPayload>
/**
 * Model PlayerStat
 * 
 */
export type PlayerStat = $Result.DefaultSelection<Prisma.$PlayerStatPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs>;

  /**
   * `prisma.userGame`: Exposes CRUD operations for the **UserGame** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserGames
    * const userGames = await prisma.userGame.findMany()
    * ```
    */
  get userGame(): Prisma.UserGameDelegate<ExtArgs>;

  /**
   * `prisma.league`: Exposes CRUD operations for the **League** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leagues
    * const leagues = await prisma.league.findMany()
    * ```
    */
  get league(): Prisma.LeagueDelegate<ExtArgs>;

  /**
   * `prisma.leagueSetting`: Exposes CRUD operations for the **LeagueSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeagueSettings
    * const leagueSettings = await prisma.leagueSetting.findMany()
    * ```
    */
  get leagueSetting(): Prisma.LeagueSettingDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.teamStanding`: Exposes CRUD operations for the **TeamStanding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamStandings
    * const teamStandings = await prisma.teamStanding.findMany()
    * ```
    */
  get teamStanding(): Prisma.TeamStandingDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.teamPlayer`: Exposes CRUD operations for the **TeamPlayer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamPlayers
    * const teamPlayers = await prisma.teamPlayer.findMany()
    * ```
    */
  get teamPlayer(): Prisma.TeamPlayerDelegate<ExtArgs>;

  /**
   * `prisma.playerStat`: Exposes CRUD operations for the **PlayerStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerStats
    * const playerStats = await prisma.playerStat.findMany()
    * ```
    */
  get playerStat(): Prisma.PlayerStatDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Game: 'Game',
    UserGame: 'UserGame',
    League: 'League',
    LeagueSetting: 'LeagueSetting',
    Team: 'Team',
    TeamStanding: 'TeamStanding',
    Player: 'Player',
    TeamPlayer: 'TeamPlayer',
    PlayerStat: 'PlayerStat'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "game" | "userGame" | "league" | "leagueSetting" | "team" | "teamStanding" | "player" | "teamPlayer" | "playerStat"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      UserGame: {
        payload: Prisma.$UserGamePayload<ExtArgs>
        fields: Prisma.UserGameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserGameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserGameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>
          }
          findFirst: {
            args: Prisma.UserGameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserGameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>
          }
          findMany: {
            args: Prisma.UserGameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>[]
          }
          create: {
            args: Prisma.UserGameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>
          }
          createMany: {
            args: Prisma.UserGameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserGameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>[]
          }
          delete: {
            args: Prisma.UserGameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>
          }
          update: {
            args: Prisma.UserGameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>
          }
          deleteMany: {
            args: Prisma.UserGameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserGameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserGameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamePayload>
          }
          aggregate: {
            args: Prisma.UserGameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserGame>
          }
          groupBy: {
            args: Prisma.UserGameGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGameGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserGameCountArgs<ExtArgs>
            result: $Utils.Optional<UserGameCountAggregateOutputType> | number
          }
        }
      }
      League: {
        payload: Prisma.$LeaguePayload<ExtArgs>
        fields: Prisma.LeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findFirst: {
            args: Prisma.LeagueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findMany: {
            args: Prisma.LeagueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          create: {
            args: Prisma.LeagueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          createMany: {
            args: Prisma.LeagueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          delete: {
            args: Prisma.LeagueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          update: {
            args: Prisma.LeagueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          deleteMany: {
            args: Prisma.LeagueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeagueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          aggregate: {
            args: Prisma.LeagueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeague>
          }
          groupBy: {
            args: Prisma.LeagueGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueCountArgs<ExtArgs>
            result: $Utils.Optional<LeagueCountAggregateOutputType> | number
          }
        }
      }
      LeagueSetting: {
        payload: Prisma.$LeagueSettingPayload<ExtArgs>
        fields: Prisma.LeagueSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>
          }
          findFirst: {
            args: Prisma.LeagueSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>
          }
          findMany: {
            args: Prisma.LeagueSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>[]
          }
          create: {
            args: Prisma.LeagueSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>
          }
          createMany: {
            args: Prisma.LeagueSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>[]
          }
          delete: {
            args: Prisma.LeagueSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>
          }
          update: {
            args: Prisma.LeagueSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>
          }
          deleteMany: {
            args: Prisma.LeagueSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeagueSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueSettingPayload>
          }
          aggregate: {
            args: Prisma.LeagueSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeagueSetting>
          }
          groupBy: {
            args: Prisma.LeagueSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeagueSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueSettingCountArgs<ExtArgs>
            result: $Utils.Optional<LeagueSettingCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamStanding: {
        payload: Prisma.$TeamStandingPayload<ExtArgs>
        fields: Prisma.TeamStandingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamStandingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamStandingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>
          }
          findFirst: {
            args: Prisma.TeamStandingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamStandingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>
          }
          findMany: {
            args: Prisma.TeamStandingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>[]
          }
          create: {
            args: Prisma.TeamStandingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>
          }
          createMany: {
            args: Prisma.TeamStandingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamStandingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>[]
          }
          delete: {
            args: Prisma.TeamStandingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>
          }
          update: {
            args: Prisma.TeamStandingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>
          }
          deleteMany: {
            args: Prisma.TeamStandingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamStandingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamStandingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStandingPayload>
          }
          aggregate: {
            args: Prisma.TeamStandingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamStanding>
          }
          groupBy: {
            args: Prisma.TeamStandingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamStandingGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamStandingCountArgs<ExtArgs>
            result: $Utils.Optional<TeamStandingCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      TeamPlayer: {
        payload: Prisma.$TeamPlayerPayload<ExtArgs>
        fields: Prisma.TeamPlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamPlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamPlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>
          }
          findFirst: {
            args: Prisma.TeamPlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamPlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>
          }
          findMany: {
            args: Prisma.TeamPlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>[]
          }
          create: {
            args: Prisma.TeamPlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>
          }
          createMany: {
            args: Prisma.TeamPlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamPlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>[]
          }
          delete: {
            args: Prisma.TeamPlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>
          }
          update: {
            args: Prisma.TeamPlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>
          }
          deleteMany: {
            args: Prisma.TeamPlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamPlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamPlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPlayerPayload>
          }
          aggregate: {
            args: Prisma.TeamPlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamPlayer>
          }
          groupBy: {
            args: Prisma.TeamPlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamPlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamPlayerCountArgs<ExtArgs>
            result: $Utils.Optional<TeamPlayerCountAggregateOutputType> | number
          }
        }
      }
      PlayerStat: {
        payload: Prisma.$PlayerStatPayload<ExtArgs>
        fields: Prisma.PlayerStatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerStatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerStatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>
          }
          findFirst: {
            args: Prisma.PlayerStatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerStatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>
          }
          findMany: {
            args: Prisma.PlayerStatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>[]
          }
          create: {
            args: Prisma.PlayerStatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>
          }
          createMany: {
            args: Prisma.PlayerStatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerStatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>[]
          }
          delete: {
            args: Prisma.PlayerStatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>
          }
          update: {
            args: Prisma.PlayerStatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>
          }
          deleteMany: {
            args: Prisma.PlayerStatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerStatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerStatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatPayload>
          }
          aggregate: {
            args: Prisma.PlayerStatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerStat>
          }
          groupBy: {
            args: Prisma.PlayerStatGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerStatGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerStatCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerStatCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    games: number
    teams: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | UserCountOutputTypeCountGamesArgs
    teams?: boolean | UserCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGameWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    leagues: number
    users: number
    playerStats: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | GameCountOutputTypeCountLeaguesArgs
    users?: boolean | GameCountOutputTypeCountUsersArgs
    playerStats?: boolean | GameCountOutputTypeCountPlayerStatsArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGameWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountPlayerStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerStatWhereInput
  }


  /**
   * Count Type LeagueCountOutputType
   */

  export type LeagueCountOutputType = {
    teams: number
  }

  export type LeagueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | LeagueCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueCountOutputType
     */
    select?: LeagueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    roster: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roster?: boolean | TeamCountOutputTypeCountRosterArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountRosterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamPlayerWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    teams: number
    stats: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | PlayerCountOutputTypeCountTeamsArgs
    stats?: boolean | PlayerCountOutputTypeCountStatsArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamPlayerWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerStatWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    yahoo_guid: string | null
    name: string | null
    nickname: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    yahoo_guid: string | null
    name: string | null
    nickname: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    yahoo_guid: number
    name: number
    nickname: number
    email: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    yahoo_guid?: true
    name?: true
    nickname?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    yahoo_guid?: true
    name?: true
    nickname?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    yahoo_guid?: true
    name?: true
    nickname?: true
    email?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    yahoo_guid: string
    name: string | null
    nickname: string | null
    email: string | null
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    yahoo_guid?: boolean
    name?: boolean
    nickname?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
    games?: boolean | User$gamesArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    yahoo_guid?: boolean
    name?: boolean
    nickname?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    yahoo_guid?: boolean
    name?: boolean
    nickname?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | User$gamesArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      games: Prisma.$UserGamePayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      yahoo_guid: string
      name: string | null
      nickname: string | null
      email: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    games<T extends User$gamesArgs<ExtArgs> = {}>(args?: Subset<T, User$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findMany"> | Null>
    teams<T extends User$teamsArgs<ExtArgs> = {}>(args?: Subset<T, User$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly yahoo_guid: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.games
   */
  export type User$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    where?: UserGameWhereInput
    orderBy?: UserGameOrderByWithRelationInput | UserGameOrderByWithRelationInput[]
    cursor?: UserGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserGameScalarFieldEnum | UserGameScalarFieldEnum[]
  }

  /**
   * User.teams
   */
  export type User$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    game_key: string | null
    game_id: string | null
    name: string | null
    code: string | null
    type: string | null
    url: string | null
    season: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    game_key: string | null
    game_id: string | null
    name: string | null
    code: string | null
    type: string | null
    url: string | null
    season: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    game_key: number
    game_id: number
    name: number
    code: number
    type: number
    url: number
    season: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    game_key?: true
    game_id?: true
    name?: true
    code?: true
    type?: true
    url?: true
    season?: true
    created_at?: true
    updated_at?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    game_key?: true
    game_id?: true
    name?: true
    code?: true
    type?: true
    url?: true
    season?: true
    created_at?: true
    updated_at?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    game_key?: true
    game_id?: true
    name?: true
    code?: true
    type?: true
    url?: true
    season?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    game_key: string
    game_id: string
    name: string | null
    code: string | null
    type: string | null
    url: string | null
    season: string | null
    created_at: Date
    updated_at: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_key?: boolean
    game_id?: boolean
    name?: boolean
    code?: boolean
    type?: boolean
    url?: boolean
    season?: boolean
    created_at?: boolean
    updated_at?: boolean
    leagues?: boolean | Game$leaguesArgs<ExtArgs>
    users?: boolean | Game$usersArgs<ExtArgs>
    playerStats?: boolean | Game$playerStatsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_key?: boolean
    game_id?: boolean
    name?: boolean
    code?: boolean
    type?: boolean
    url?: boolean
    season?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    game_key?: boolean
    game_id?: boolean
    name?: boolean
    code?: boolean
    type?: boolean
    url?: boolean
    season?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | Game$leaguesArgs<ExtArgs>
    users?: boolean | Game$usersArgs<ExtArgs>
    playerStats?: boolean | Game$playerStatsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      leagues: Prisma.$LeaguePayload<ExtArgs>[]
      users: Prisma.$UserGamePayload<ExtArgs>[]
      playerStats: Prisma.$PlayerStatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      game_key: string
      game_id: string
      name: string | null
      code: string | null
      type: string | null
      url: string | null
      season: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leagues<T extends Game$leaguesArgs<ExtArgs> = {}>(args?: Subset<T, Game$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends Game$usersArgs<ExtArgs> = {}>(args?: Subset<T, Game$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findMany"> | Null>
    playerStats<T extends Game$playerStatsArgs<ExtArgs> = {}>(args?: Subset<T, Game$playerStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */ 
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly game_key: FieldRef<"Game", 'String'>
    readonly game_id: FieldRef<"Game", 'String'>
    readonly name: FieldRef<"Game", 'String'>
    readonly code: FieldRef<"Game", 'String'>
    readonly type: FieldRef<"Game", 'String'>
    readonly url: FieldRef<"Game", 'String'>
    readonly season: FieldRef<"Game", 'String'>
    readonly created_at: FieldRef<"Game", 'DateTime'>
    readonly updated_at: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }

  /**
   * Game.leagues
   */
  export type Game$leaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * Game.users
   */
  export type Game$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    where?: UserGameWhereInput
    orderBy?: UserGameOrderByWithRelationInput | UserGameOrderByWithRelationInput[]
    cursor?: UserGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserGameScalarFieldEnum | UserGameScalarFieldEnum[]
  }

  /**
   * Game.playerStats
   */
  export type Game$playerStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    where?: PlayerStatWhereInput
    orderBy?: PlayerStatOrderByWithRelationInput | PlayerStatOrderByWithRelationInput[]
    cursor?: PlayerStatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerStatScalarFieldEnum | PlayerStatScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model UserGame
   */

  export type AggregateUserGame = {
    _count: UserGameCountAggregateOutputType | null
    _avg: UserGameAvgAggregateOutputType | null
    _sum: UserGameSumAggregateOutputType | null
    _min: UserGameMinAggregateOutputType | null
    _max: UserGameMaxAggregateOutputType | null
  }

  export type UserGameAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
  }

  export type UserGameSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
  }

  export type UserGameMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    created_at: Date | null
  }

  export type UserGameMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    created_at: Date | null
  }

  export type UserGameCountAggregateOutputType = {
    id: number
    user_id: number
    game_id: number
    created_at: number
    _all: number
  }


  export type UserGameAvgAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
  }

  export type UserGameSumAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
  }

  export type UserGameMinAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    created_at?: true
  }

  export type UserGameMaxAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    created_at?: true
  }

  export type UserGameCountAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    created_at?: true
    _all?: true
  }

  export type UserGameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserGame to aggregate.
     */
    where?: UserGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGames to fetch.
     */
    orderBy?: UserGameOrderByWithRelationInput | UserGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserGames
    **/
    _count?: true | UserGameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserGameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserGameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserGameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserGameMaxAggregateInputType
  }

  export type GetUserGameAggregateType<T extends UserGameAggregateArgs> = {
        [P in keyof T & keyof AggregateUserGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserGame[P]>
      : GetScalarType<T[P], AggregateUserGame[P]>
  }




  export type UserGameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGameWhereInput
    orderBy?: UserGameOrderByWithAggregationInput | UserGameOrderByWithAggregationInput[]
    by: UserGameScalarFieldEnum[] | UserGameScalarFieldEnum
    having?: UserGameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserGameCountAggregateInputType | true
    _avg?: UserGameAvgAggregateInputType
    _sum?: UserGameSumAggregateInputType
    _min?: UserGameMinAggregateInputType
    _max?: UserGameMaxAggregateInputType
  }

  export type UserGameGroupByOutputType = {
    id: number
    user_id: number
    game_id: number
    created_at: Date
    _count: UserGameCountAggregateOutputType | null
    _avg: UserGameAvgAggregateOutputType | null
    _sum: UserGameSumAggregateOutputType | null
    _min: UserGameMinAggregateOutputType | null
    _max: UserGameMaxAggregateOutputType | null
  }

  type GetUserGameGroupByPayload<T extends UserGameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGameGroupByOutputType[P]>
            : GetScalarType<T[P], UserGameGroupByOutputType[P]>
        }
      >
    >


  export type UserGameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGame"]>

  export type UserGameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGame"]>

  export type UserGameSelectScalar = {
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    created_at?: boolean
  }

  export type UserGameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type UserGameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $UserGamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserGame"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      game_id: number
      created_at: Date
    }, ExtArgs["result"]["userGame"]>
    composites: {}
  }

  type UserGameGetPayload<S extends boolean | null | undefined | UserGameDefaultArgs> = $Result.GetResult<Prisma.$UserGamePayload, S>

  type UserGameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserGameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserGameCountAggregateInputType | true
    }

  export interface UserGameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserGame'], meta: { name: 'UserGame' } }
    /**
     * Find zero or one UserGame that matches the filter.
     * @param {UserGameFindUniqueArgs} args - Arguments to find a UserGame
     * @example
     * // Get one UserGame
     * const userGame = await prisma.userGame.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserGameFindUniqueArgs>(args: SelectSubset<T, UserGameFindUniqueArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserGame that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserGameFindUniqueOrThrowArgs} args - Arguments to find a UserGame
     * @example
     * // Get one UserGame
     * const userGame = await prisma.userGame.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserGameFindUniqueOrThrowArgs>(args: SelectSubset<T, UserGameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserGame that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameFindFirstArgs} args - Arguments to find a UserGame
     * @example
     * // Get one UserGame
     * const userGame = await prisma.userGame.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserGameFindFirstArgs>(args?: SelectSubset<T, UserGameFindFirstArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserGame that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameFindFirstOrThrowArgs} args - Arguments to find a UserGame
     * @example
     * // Get one UserGame
     * const userGame = await prisma.userGame.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserGameFindFirstOrThrowArgs>(args?: SelectSubset<T, UserGameFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserGames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserGames
     * const userGames = await prisma.userGame.findMany()
     * 
     * // Get first 10 UserGames
     * const userGames = await prisma.userGame.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userGameWithIdOnly = await prisma.userGame.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserGameFindManyArgs>(args?: SelectSubset<T, UserGameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserGame.
     * @param {UserGameCreateArgs} args - Arguments to create a UserGame.
     * @example
     * // Create one UserGame
     * const UserGame = await prisma.userGame.create({
     *   data: {
     *     // ... data to create a UserGame
     *   }
     * })
     * 
     */
    create<T extends UserGameCreateArgs>(args: SelectSubset<T, UserGameCreateArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserGames.
     * @param {UserGameCreateManyArgs} args - Arguments to create many UserGames.
     * @example
     * // Create many UserGames
     * const userGame = await prisma.userGame.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserGameCreateManyArgs>(args?: SelectSubset<T, UserGameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserGames and returns the data saved in the database.
     * @param {UserGameCreateManyAndReturnArgs} args - Arguments to create many UserGames.
     * @example
     * // Create many UserGames
     * const userGame = await prisma.userGame.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserGames and only return the `id`
     * const userGameWithIdOnly = await prisma.userGame.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserGameCreateManyAndReturnArgs>(args?: SelectSubset<T, UserGameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserGame.
     * @param {UserGameDeleteArgs} args - Arguments to delete one UserGame.
     * @example
     * // Delete one UserGame
     * const UserGame = await prisma.userGame.delete({
     *   where: {
     *     // ... filter to delete one UserGame
     *   }
     * })
     * 
     */
    delete<T extends UserGameDeleteArgs>(args: SelectSubset<T, UserGameDeleteArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserGame.
     * @param {UserGameUpdateArgs} args - Arguments to update one UserGame.
     * @example
     * // Update one UserGame
     * const userGame = await prisma.userGame.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserGameUpdateArgs>(args: SelectSubset<T, UserGameUpdateArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserGames.
     * @param {UserGameDeleteManyArgs} args - Arguments to filter UserGames to delete.
     * @example
     * // Delete a few UserGames
     * const { count } = await prisma.userGame.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserGameDeleteManyArgs>(args?: SelectSubset<T, UserGameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserGames
     * const userGame = await prisma.userGame.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserGameUpdateManyArgs>(args: SelectSubset<T, UserGameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserGame.
     * @param {UserGameUpsertArgs} args - Arguments to update or create a UserGame.
     * @example
     * // Update or create a UserGame
     * const userGame = await prisma.userGame.upsert({
     *   create: {
     *     // ... data to create a UserGame
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserGame we want to update
     *   }
     * })
     */
    upsert<T extends UserGameUpsertArgs>(args: SelectSubset<T, UserGameUpsertArgs<ExtArgs>>): Prisma__UserGameClient<$Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameCountArgs} args - Arguments to filter UserGames to count.
     * @example
     * // Count the number of UserGames
     * const count = await prisma.userGame.count({
     *   where: {
     *     // ... the filter for the UserGames we want to count
     *   }
     * })
    **/
    count<T extends UserGameCountArgs>(
      args?: Subset<T, UserGameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserGameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserGameAggregateArgs>(args: Subset<T, UserGameAggregateArgs>): Prisma.PrismaPromise<GetUserGameAggregateType<T>>

    /**
     * Group by UserGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGameGroupByArgs['orderBy'] }
        : { orderBy?: UserGameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserGame model
   */
  readonly fields: UserGameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserGame.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserGameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserGame model
   */ 
  interface UserGameFieldRefs {
    readonly id: FieldRef<"UserGame", 'Int'>
    readonly user_id: FieldRef<"UserGame", 'Int'>
    readonly game_id: FieldRef<"UserGame", 'Int'>
    readonly created_at: FieldRef<"UserGame", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserGame findUnique
   */
  export type UserGameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * Filter, which UserGame to fetch.
     */
    where: UserGameWhereUniqueInput
  }

  /**
   * UserGame findUniqueOrThrow
   */
  export type UserGameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * Filter, which UserGame to fetch.
     */
    where: UserGameWhereUniqueInput
  }

  /**
   * UserGame findFirst
   */
  export type UserGameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * Filter, which UserGame to fetch.
     */
    where?: UserGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGames to fetch.
     */
    orderBy?: UserGameOrderByWithRelationInput | UserGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGames.
     */
    cursor?: UserGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGames.
     */
    distinct?: UserGameScalarFieldEnum | UserGameScalarFieldEnum[]
  }

  /**
   * UserGame findFirstOrThrow
   */
  export type UserGameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * Filter, which UserGame to fetch.
     */
    where?: UserGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGames to fetch.
     */
    orderBy?: UserGameOrderByWithRelationInput | UserGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGames.
     */
    cursor?: UserGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGames.
     */
    distinct?: UserGameScalarFieldEnum | UserGameScalarFieldEnum[]
  }

  /**
   * UserGame findMany
   */
  export type UserGameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * Filter, which UserGames to fetch.
     */
    where?: UserGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGames to fetch.
     */
    orderBy?: UserGameOrderByWithRelationInput | UserGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserGames.
     */
    cursor?: UserGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGames.
     */
    skip?: number
    distinct?: UserGameScalarFieldEnum | UserGameScalarFieldEnum[]
  }

  /**
   * UserGame create
   */
  export type UserGameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * The data needed to create a UserGame.
     */
    data: XOR<UserGameCreateInput, UserGameUncheckedCreateInput>
  }

  /**
   * UserGame createMany
   */
  export type UserGameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserGames.
     */
    data: UserGameCreateManyInput | UserGameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserGame createManyAndReturn
   */
  export type UserGameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserGames.
     */
    data: UserGameCreateManyInput | UserGameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserGame update
   */
  export type UserGameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * The data needed to update a UserGame.
     */
    data: XOR<UserGameUpdateInput, UserGameUncheckedUpdateInput>
    /**
     * Choose, which UserGame to update.
     */
    where: UserGameWhereUniqueInput
  }

  /**
   * UserGame updateMany
   */
  export type UserGameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserGames.
     */
    data: XOR<UserGameUpdateManyMutationInput, UserGameUncheckedUpdateManyInput>
    /**
     * Filter which UserGames to update
     */
    where?: UserGameWhereInput
  }

  /**
   * UserGame upsert
   */
  export type UserGameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * The filter to search for the UserGame to update in case it exists.
     */
    where: UserGameWhereUniqueInput
    /**
     * In case the UserGame found by the `where` argument doesn't exist, create a new UserGame with this data.
     */
    create: XOR<UserGameCreateInput, UserGameUncheckedCreateInput>
    /**
     * In case the UserGame was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserGameUpdateInput, UserGameUncheckedUpdateInput>
  }

  /**
   * UserGame delete
   */
  export type UserGameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
    /**
     * Filter which UserGame to delete.
     */
    where: UserGameWhereUniqueInput
  }

  /**
   * UserGame deleteMany
   */
  export type UserGameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserGames to delete
     */
    where?: UserGameWhereInput
  }

  /**
   * UserGame without action
   */
  export type UserGameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGame
     */
    select?: UserGameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGameInclude<ExtArgs> | null
  }


  /**
   * Model League
   */

  export type AggregateLeague = {
    _count: LeagueCountAggregateOutputType | null
    _avg: LeagueAvgAggregateOutputType | null
    _sum: LeagueSumAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  export type LeagueAvgAggregateOutputType = {
    id: number | null
    num_teams: number | null
    current_week: number | null
    start_week: number | null
    end_week: number | null
    game_id: number | null
  }

  export type LeagueSumAggregateOutputType = {
    id: number | null
    num_teams: number | null
    current_week: number | null
    start_week: number | null
    end_week: number | null
    game_id: number | null
  }

  export type LeagueMinAggregateOutputType = {
    id: number | null
    league_key: string | null
    league_id: string | null
    name: string | null
    url: string | null
    draft_status: string | null
    num_teams: number | null
    scoring_type: string | null
    current_week: number | null
    start_week: number | null
    end_week: number | null
    start_date: Date | null
    end_date: Date | null
    game_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeagueMaxAggregateOutputType = {
    id: number | null
    league_key: string | null
    league_id: string | null
    name: string | null
    url: string | null
    draft_status: string | null
    num_teams: number | null
    scoring_type: string | null
    current_week: number | null
    start_week: number | null
    end_week: number | null
    start_date: Date | null
    end_date: Date | null
    game_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeagueCountAggregateOutputType = {
    id: number
    league_key: number
    league_id: number
    name: number
    url: number
    draft_status: number
    num_teams: number
    scoring_type: number
    current_week: number
    start_week: number
    end_week: number
    start_date: number
    end_date: number
    game_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LeagueAvgAggregateInputType = {
    id?: true
    num_teams?: true
    current_week?: true
    start_week?: true
    end_week?: true
    game_id?: true
  }

  export type LeagueSumAggregateInputType = {
    id?: true
    num_teams?: true
    current_week?: true
    start_week?: true
    end_week?: true
    game_id?: true
  }

  export type LeagueMinAggregateInputType = {
    id?: true
    league_key?: true
    league_id?: true
    name?: true
    url?: true
    draft_status?: true
    num_teams?: true
    scoring_type?: true
    current_week?: true
    start_week?: true
    end_week?: true
    start_date?: true
    end_date?: true
    game_id?: true
    created_at?: true
    updated_at?: true
  }

  export type LeagueMaxAggregateInputType = {
    id?: true
    league_key?: true
    league_id?: true
    name?: true
    url?: true
    draft_status?: true
    num_teams?: true
    scoring_type?: true
    current_week?: true
    start_week?: true
    end_week?: true
    start_date?: true
    end_date?: true
    game_id?: true
    created_at?: true
    updated_at?: true
  }

  export type LeagueCountAggregateInputType = {
    id?: true
    league_key?: true
    league_id?: true
    name?: true
    url?: true
    draft_status?: true
    num_teams?: true
    scoring_type?: true
    current_week?: true
    start_week?: true
    end_week?: true
    start_date?: true
    end_date?: true
    game_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which League to aggregate.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leagues
    **/
    _count?: true | LeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeagueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeagueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueMaxAggregateInputType
  }

  export type GetLeagueAggregateType<T extends LeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeague[P]>
      : GetScalarType<T[P], AggregateLeague[P]>
  }




  export type LeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithAggregationInput | LeagueOrderByWithAggregationInput[]
    by: LeagueScalarFieldEnum[] | LeagueScalarFieldEnum
    having?: LeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueCountAggregateInputType | true
    _avg?: LeagueAvgAggregateInputType
    _sum?: LeagueSumAggregateInputType
    _min?: LeagueMinAggregateInputType
    _max?: LeagueMaxAggregateInputType
  }

  export type LeagueGroupByOutputType = {
    id: number
    league_key: string
    league_id: string | null
    name: string | null
    url: string | null
    draft_status: string | null
    num_teams: number | null
    scoring_type: string | null
    current_week: number | null
    start_week: number | null
    end_week: number | null
    start_date: Date | null
    end_date: Date | null
    game_id: number
    created_at: Date
    updated_at: Date
    _count: LeagueCountAggregateOutputType | null
    _avg: LeagueAvgAggregateOutputType | null
    _sum: LeagueSumAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  type GetLeagueGroupByPayload<T extends LeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueGroupByOutputType[P]>
        }
      >
    >


  export type LeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    league_key?: boolean
    league_id?: boolean
    name?: boolean
    url?: boolean
    draft_status?: boolean
    num_teams?: boolean
    scoring_type?: boolean
    current_week?: boolean
    start_week?: boolean
    end_week?: boolean
    start_date?: boolean
    end_date?: boolean
    game_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    teams?: boolean | League$teamsArgs<ExtArgs>
    settings?: boolean | League$settingsArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    league_key?: boolean
    league_id?: boolean
    name?: boolean
    url?: boolean
    draft_status?: boolean
    num_teams?: boolean
    scoring_type?: boolean
    current_week?: boolean
    start_week?: boolean
    end_week?: boolean
    start_date?: boolean
    end_date?: boolean
    game_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectScalar = {
    id?: boolean
    league_key?: boolean
    league_id?: boolean
    name?: boolean
    url?: boolean
    draft_status?: boolean
    num_teams?: boolean
    scoring_type?: boolean
    current_week?: boolean
    start_week?: boolean
    end_week?: boolean
    start_date?: boolean
    end_date?: boolean
    game_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    teams?: boolean | League$teamsArgs<ExtArgs>
    settings?: boolean | League$settingsArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $LeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "League"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      teams: Prisma.$TeamPayload<ExtArgs>[]
      settings: Prisma.$LeagueSettingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      league_key: string
      league_id: string | null
      name: string | null
      url: string | null
      draft_status: string | null
      num_teams: number | null
      scoring_type: string | null
      current_week: number | null
      start_week: number | null
      end_week: number | null
      start_date: Date | null
      end_date: Date | null
      game_id: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["league"]>
    composites: {}
  }

  type LeagueGetPayload<S extends boolean | null | undefined | LeagueDefaultArgs> = $Result.GetResult<Prisma.$LeaguePayload, S>

  type LeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeagueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeagueCountAggregateInputType | true
    }

  export interface LeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['League'], meta: { name: 'League' } }
    /**
     * Find zero or one League that matches the filter.
     * @param {LeagueFindUniqueArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeagueFindUniqueArgs>(args: SelectSubset<T, LeagueFindUniqueArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one League that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeagueFindUniqueOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeagueFindUniqueOrThrowArgs>(args: SelectSubset<T, LeagueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first League that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeagueFindFirstArgs>(args?: SelectSubset<T, LeagueFindFirstArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first League that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeagueFindFirstOrThrowArgs>(args?: SelectSubset<T, LeagueFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leagues
     * const leagues = await prisma.league.findMany()
     * 
     * // Get first 10 Leagues
     * const leagues = await prisma.league.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueWithIdOnly = await prisma.league.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeagueFindManyArgs>(args?: SelectSubset<T, LeagueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a League.
     * @param {LeagueCreateArgs} args - Arguments to create a League.
     * @example
     * // Create one League
     * const League = await prisma.league.create({
     *   data: {
     *     // ... data to create a League
     *   }
     * })
     * 
     */
    create<T extends LeagueCreateArgs>(args: SelectSubset<T, LeagueCreateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leagues.
     * @param {LeagueCreateManyArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeagueCreateManyArgs>(args?: SelectSubset<T, LeagueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leagues and returns the data saved in the database.
     * @param {LeagueCreateManyAndReturnArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeagueCreateManyAndReturnArgs>(args?: SelectSubset<T, LeagueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a League.
     * @param {LeagueDeleteArgs} args - Arguments to delete one League.
     * @example
     * // Delete one League
     * const League = await prisma.league.delete({
     *   where: {
     *     // ... filter to delete one League
     *   }
     * })
     * 
     */
    delete<T extends LeagueDeleteArgs>(args: SelectSubset<T, LeagueDeleteArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one League.
     * @param {LeagueUpdateArgs} args - Arguments to update one League.
     * @example
     * // Update one League
     * const league = await prisma.league.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeagueUpdateArgs>(args: SelectSubset<T, LeagueUpdateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leagues.
     * @param {LeagueDeleteManyArgs} args - Arguments to filter Leagues to delete.
     * @example
     * // Delete a few Leagues
     * const { count } = await prisma.league.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeagueDeleteManyArgs>(args?: SelectSubset<T, LeagueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeagueUpdateManyArgs>(args: SelectSubset<T, LeagueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one League.
     * @param {LeagueUpsertArgs} args - Arguments to update or create a League.
     * @example
     * // Update or create a League
     * const league = await prisma.league.upsert({
     *   create: {
     *     // ... data to create a League
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the League we want to update
     *   }
     * })
     */
    upsert<T extends LeagueUpsertArgs>(args: SelectSubset<T, LeagueUpsertArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueCountArgs} args - Arguments to filter Leagues to count.
     * @example
     * // Count the number of Leagues
     * const count = await prisma.league.count({
     *   where: {
     *     // ... the filter for the Leagues we want to count
     *   }
     * })
    **/
    count<T extends LeagueCountArgs>(
      args?: Subset<T, LeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueAggregateArgs>(args: Subset<T, LeagueAggregateArgs>): Prisma.PrismaPromise<GetLeagueAggregateType<T>>

    /**
     * Group by League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueGroupByArgs['orderBy'] }
        : { orderBy?: LeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the League model
   */
  readonly fields: LeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for League.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teams<T extends League$teamsArgs<ExtArgs> = {}>(args?: Subset<T, League$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany"> | Null>
    settings<T extends League$settingsArgs<ExtArgs> = {}>(args?: Subset<T, League$settingsArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the League model
   */ 
  interface LeagueFieldRefs {
    readonly id: FieldRef<"League", 'Int'>
    readonly league_key: FieldRef<"League", 'String'>
    readonly league_id: FieldRef<"League", 'String'>
    readonly name: FieldRef<"League", 'String'>
    readonly url: FieldRef<"League", 'String'>
    readonly draft_status: FieldRef<"League", 'String'>
    readonly num_teams: FieldRef<"League", 'Int'>
    readonly scoring_type: FieldRef<"League", 'String'>
    readonly current_week: FieldRef<"League", 'Int'>
    readonly start_week: FieldRef<"League", 'Int'>
    readonly end_week: FieldRef<"League", 'Int'>
    readonly start_date: FieldRef<"League", 'DateTime'>
    readonly end_date: FieldRef<"League", 'DateTime'>
    readonly game_id: FieldRef<"League", 'Int'>
    readonly created_at: FieldRef<"League", 'DateTime'>
    readonly updated_at: FieldRef<"League", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * League findUnique
   */
  export type LeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findUniqueOrThrow
   */
  export type LeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findFirst
   */
  export type LeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findFirstOrThrow
   */
  export type LeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findMany
   */
  export type LeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League create
   */
  export type LeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a League.
     */
    data: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
  }

  /**
   * League createMany
   */
  export type LeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * League createManyAndReturn
   */
  export type LeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * League update
   */
  export type LeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a League.
     */
    data: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
    /**
     * Choose, which League to update.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League updateMany
   */
  export type LeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
  }

  /**
   * League upsert
   */
  export type LeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the League to update in case it exists.
     */
    where: LeagueWhereUniqueInput
    /**
     * In case the League found by the `where` argument doesn't exist, create a new League with this data.
     */
    create: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
    /**
     * In case the League was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
  }

  /**
   * League delete
   */
  export type LeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter which League to delete.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League deleteMany
   */
  export type LeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to delete
     */
    where?: LeagueWhereInput
  }

  /**
   * League.teams
   */
  export type League$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * League.settings
   */
  export type League$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    where?: LeagueSettingWhereInput
  }

  /**
   * League without action
   */
  export type LeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
  }


  /**
   * Model LeagueSetting
   */

  export type AggregateLeagueSetting = {
    _count: LeagueSettingCountAggregateOutputType | null
    _avg: LeagueSettingAvgAggregateOutputType | null
    _sum: LeagueSettingSumAggregateOutputType | null
    _min: LeagueSettingMinAggregateOutputType | null
    _max: LeagueSettingMaxAggregateOutputType | null
  }

  export type LeagueSettingAvgAggregateOutputType = {
    id: number | null
    league_id: number | null
  }

  export type LeagueSettingSumAggregateOutputType = {
    id: number | null
    league_id: number | null
  }

  export type LeagueSettingMinAggregateOutputType = {
    id: number | null
    league_id: number | null
    settings_data: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeagueSettingMaxAggregateOutputType = {
    id: number | null
    league_id: number | null
    settings_data: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeagueSettingCountAggregateOutputType = {
    id: number
    league_id: number
    settings_data: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LeagueSettingAvgAggregateInputType = {
    id?: true
    league_id?: true
  }

  export type LeagueSettingSumAggregateInputType = {
    id?: true
    league_id?: true
  }

  export type LeagueSettingMinAggregateInputType = {
    id?: true
    league_id?: true
    settings_data?: true
    created_at?: true
    updated_at?: true
  }

  export type LeagueSettingMaxAggregateInputType = {
    id?: true
    league_id?: true
    settings_data?: true
    created_at?: true
    updated_at?: true
  }

  export type LeagueSettingCountAggregateInputType = {
    id?: true
    league_id?: true
    settings_data?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LeagueSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeagueSetting to aggregate.
     */
    where?: LeagueSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueSettings to fetch.
     */
    orderBy?: LeagueSettingOrderByWithRelationInput | LeagueSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeagueSettings
    **/
    _count?: true | LeagueSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeagueSettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeagueSettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueSettingMaxAggregateInputType
  }

  export type GetLeagueSettingAggregateType<T extends LeagueSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateLeagueSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeagueSetting[P]>
      : GetScalarType<T[P], AggregateLeagueSetting[P]>
  }




  export type LeagueSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueSettingWhereInput
    orderBy?: LeagueSettingOrderByWithAggregationInput | LeagueSettingOrderByWithAggregationInput[]
    by: LeagueSettingScalarFieldEnum[] | LeagueSettingScalarFieldEnum
    having?: LeagueSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueSettingCountAggregateInputType | true
    _avg?: LeagueSettingAvgAggregateInputType
    _sum?: LeagueSettingSumAggregateInputType
    _min?: LeagueSettingMinAggregateInputType
    _max?: LeagueSettingMaxAggregateInputType
  }

  export type LeagueSettingGroupByOutputType = {
    id: number
    league_id: number
    settings_data: string | null
    created_at: Date
    updated_at: Date
    _count: LeagueSettingCountAggregateOutputType | null
    _avg: LeagueSettingAvgAggregateOutputType | null
    _sum: LeagueSettingSumAggregateOutputType | null
    _min: LeagueSettingMinAggregateOutputType | null
    _max: LeagueSettingMaxAggregateOutputType | null
  }

  type GetLeagueSettingGroupByPayload<T extends LeagueSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueSettingGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueSettingGroupByOutputType[P]>
        }
      >
    >


  export type LeagueSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    league_id?: boolean
    settings_data?: boolean
    created_at?: boolean
    updated_at?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leagueSetting"]>

  export type LeagueSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    league_id?: boolean
    settings_data?: boolean
    created_at?: boolean
    updated_at?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leagueSetting"]>

  export type LeagueSettingSelectScalar = {
    id?: boolean
    league_id?: boolean
    settings_data?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LeagueSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }
  export type LeagueSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }

  export type $LeagueSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeagueSetting"
    objects: {
      league: Prisma.$LeaguePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      league_id: number
      settings_data: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["leagueSetting"]>
    composites: {}
  }

  type LeagueSettingGetPayload<S extends boolean | null | undefined | LeagueSettingDefaultArgs> = $Result.GetResult<Prisma.$LeagueSettingPayload, S>

  type LeagueSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeagueSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeagueSettingCountAggregateInputType | true
    }

  export interface LeagueSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeagueSetting'], meta: { name: 'LeagueSetting' } }
    /**
     * Find zero or one LeagueSetting that matches the filter.
     * @param {LeagueSettingFindUniqueArgs} args - Arguments to find a LeagueSetting
     * @example
     * // Get one LeagueSetting
     * const leagueSetting = await prisma.leagueSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeagueSettingFindUniqueArgs>(args: SelectSubset<T, LeagueSettingFindUniqueArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeagueSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeagueSettingFindUniqueOrThrowArgs} args - Arguments to find a LeagueSetting
     * @example
     * // Get one LeagueSetting
     * const leagueSetting = await prisma.leagueSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeagueSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, LeagueSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeagueSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingFindFirstArgs} args - Arguments to find a LeagueSetting
     * @example
     * // Get one LeagueSetting
     * const leagueSetting = await prisma.leagueSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeagueSettingFindFirstArgs>(args?: SelectSubset<T, LeagueSettingFindFirstArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeagueSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingFindFirstOrThrowArgs} args - Arguments to find a LeagueSetting
     * @example
     * // Get one LeagueSetting
     * const leagueSetting = await prisma.leagueSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeagueSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, LeagueSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeagueSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeagueSettings
     * const leagueSettings = await prisma.leagueSetting.findMany()
     * 
     * // Get first 10 LeagueSettings
     * const leagueSettings = await prisma.leagueSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueSettingWithIdOnly = await prisma.leagueSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeagueSettingFindManyArgs>(args?: SelectSubset<T, LeagueSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeagueSetting.
     * @param {LeagueSettingCreateArgs} args - Arguments to create a LeagueSetting.
     * @example
     * // Create one LeagueSetting
     * const LeagueSetting = await prisma.leagueSetting.create({
     *   data: {
     *     // ... data to create a LeagueSetting
     *   }
     * })
     * 
     */
    create<T extends LeagueSettingCreateArgs>(args: SelectSubset<T, LeagueSettingCreateArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeagueSettings.
     * @param {LeagueSettingCreateManyArgs} args - Arguments to create many LeagueSettings.
     * @example
     * // Create many LeagueSettings
     * const leagueSetting = await prisma.leagueSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeagueSettingCreateManyArgs>(args?: SelectSubset<T, LeagueSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeagueSettings and returns the data saved in the database.
     * @param {LeagueSettingCreateManyAndReturnArgs} args - Arguments to create many LeagueSettings.
     * @example
     * // Create many LeagueSettings
     * const leagueSetting = await prisma.leagueSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeagueSettings and only return the `id`
     * const leagueSettingWithIdOnly = await prisma.leagueSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeagueSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, LeagueSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeagueSetting.
     * @param {LeagueSettingDeleteArgs} args - Arguments to delete one LeagueSetting.
     * @example
     * // Delete one LeagueSetting
     * const LeagueSetting = await prisma.leagueSetting.delete({
     *   where: {
     *     // ... filter to delete one LeagueSetting
     *   }
     * })
     * 
     */
    delete<T extends LeagueSettingDeleteArgs>(args: SelectSubset<T, LeagueSettingDeleteArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeagueSetting.
     * @param {LeagueSettingUpdateArgs} args - Arguments to update one LeagueSetting.
     * @example
     * // Update one LeagueSetting
     * const leagueSetting = await prisma.leagueSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeagueSettingUpdateArgs>(args: SelectSubset<T, LeagueSettingUpdateArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeagueSettings.
     * @param {LeagueSettingDeleteManyArgs} args - Arguments to filter LeagueSettings to delete.
     * @example
     * // Delete a few LeagueSettings
     * const { count } = await prisma.leagueSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeagueSettingDeleteManyArgs>(args?: SelectSubset<T, LeagueSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeagueSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeagueSettings
     * const leagueSetting = await prisma.leagueSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeagueSettingUpdateManyArgs>(args: SelectSubset<T, LeagueSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeagueSetting.
     * @param {LeagueSettingUpsertArgs} args - Arguments to update or create a LeagueSetting.
     * @example
     * // Update or create a LeagueSetting
     * const leagueSetting = await prisma.leagueSetting.upsert({
     *   create: {
     *     // ... data to create a LeagueSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeagueSetting we want to update
     *   }
     * })
     */
    upsert<T extends LeagueSettingUpsertArgs>(args: SelectSubset<T, LeagueSettingUpsertArgs<ExtArgs>>): Prisma__LeagueSettingClient<$Result.GetResult<Prisma.$LeagueSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeagueSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingCountArgs} args - Arguments to filter LeagueSettings to count.
     * @example
     * // Count the number of LeagueSettings
     * const count = await prisma.leagueSetting.count({
     *   where: {
     *     // ... the filter for the LeagueSettings we want to count
     *   }
     * })
    **/
    count<T extends LeagueSettingCountArgs>(
      args?: Subset<T, LeagueSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeagueSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueSettingAggregateArgs>(args: Subset<T, LeagueSettingAggregateArgs>): Prisma.PrismaPromise<GetLeagueSettingAggregateType<T>>

    /**
     * Group by LeagueSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueSettingGroupByArgs['orderBy'] }
        : { orderBy?: LeagueSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeagueSetting model
   */
  readonly fields: LeagueSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeagueSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeagueSetting model
   */ 
  interface LeagueSettingFieldRefs {
    readonly id: FieldRef<"LeagueSetting", 'Int'>
    readonly league_id: FieldRef<"LeagueSetting", 'Int'>
    readonly settings_data: FieldRef<"LeagueSetting", 'String'>
    readonly created_at: FieldRef<"LeagueSetting", 'DateTime'>
    readonly updated_at: FieldRef<"LeagueSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeagueSetting findUnique
   */
  export type LeagueSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * Filter, which LeagueSetting to fetch.
     */
    where: LeagueSettingWhereUniqueInput
  }

  /**
   * LeagueSetting findUniqueOrThrow
   */
  export type LeagueSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * Filter, which LeagueSetting to fetch.
     */
    where: LeagueSettingWhereUniqueInput
  }

  /**
   * LeagueSetting findFirst
   */
  export type LeagueSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * Filter, which LeagueSetting to fetch.
     */
    where?: LeagueSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueSettings to fetch.
     */
    orderBy?: LeagueSettingOrderByWithRelationInput | LeagueSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeagueSettings.
     */
    cursor?: LeagueSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeagueSettings.
     */
    distinct?: LeagueSettingScalarFieldEnum | LeagueSettingScalarFieldEnum[]
  }

  /**
   * LeagueSetting findFirstOrThrow
   */
  export type LeagueSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * Filter, which LeagueSetting to fetch.
     */
    where?: LeagueSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueSettings to fetch.
     */
    orderBy?: LeagueSettingOrderByWithRelationInput | LeagueSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeagueSettings.
     */
    cursor?: LeagueSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeagueSettings.
     */
    distinct?: LeagueSettingScalarFieldEnum | LeagueSettingScalarFieldEnum[]
  }

  /**
   * LeagueSetting findMany
   */
  export type LeagueSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * Filter, which LeagueSettings to fetch.
     */
    where?: LeagueSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueSettings to fetch.
     */
    orderBy?: LeagueSettingOrderByWithRelationInput | LeagueSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeagueSettings.
     */
    cursor?: LeagueSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueSettings.
     */
    skip?: number
    distinct?: LeagueSettingScalarFieldEnum | LeagueSettingScalarFieldEnum[]
  }

  /**
   * LeagueSetting create
   */
  export type LeagueSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a LeagueSetting.
     */
    data: XOR<LeagueSettingCreateInput, LeagueSettingUncheckedCreateInput>
  }

  /**
   * LeagueSetting createMany
   */
  export type LeagueSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeagueSettings.
     */
    data: LeagueSettingCreateManyInput | LeagueSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeagueSetting createManyAndReturn
   */
  export type LeagueSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeagueSettings.
     */
    data: LeagueSettingCreateManyInput | LeagueSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeagueSetting update
   */
  export type LeagueSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a LeagueSetting.
     */
    data: XOR<LeagueSettingUpdateInput, LeagueSettingUncheckedUpdateInput>
    /**
     * Choose, which LeagueSetting to update.
     */
    where: LeagueSettingWhereUniqueInput
  }

  /**
   * LeagueSetting updateMany
   */
  export type LeagueSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeagueSettings.
     */
    data: XOR<LeagueSettingUpdateManyMutationInput, LeagueSettingUncheckedUpdateManyInput>
    /**
     * Filter which LeagueSettings to update
     */
    where?: LeagueSettingWhereInput
  }

  /**
   * LeagueSetting upsert
   */
  export type LeagueSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the LeagueSetting to update in case it exists.
     */
    where: LeagueSettingWhereUniqueInput
    /**
     * In case the LeagueSetting found by the `where` argument doesn't exist, create a new LeagueSetting with this data.
     */
    create: XOR<LeagueSettingCreateInput, LeagueSettingUncheckedCreateInput>
    /**
     * In case the LeagueSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueSettingUpdateInput, LeagueSettingUncheckedUpdateInput>
  }

  /**
   * LeagueSetting delete
   */
  export type LeagueSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
    /**
     * Filter which LeagueSetting to delete.
     */
    where: LeagueSettingWhereUniqueInput
  }

  /**
   * LeagueSetting deleteMany
   */
  export type LeagueSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeagueSettings to delete
     */
    where?: LeagueSettingWhereInput
  }

  /**
   * LeagueSetting without action
   */
  export type LeagueSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueSetting
     */
    select?: LeagueSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueSettingInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
    waiver_priority: number | null
    number_of_moves: number | null
    number_of_trades: number | null
    league_id: number | null
    manager_user_id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
    waiver_priority: number | null
    number_of_moves: number | null
    number_of_trades: number | null
    league_id: number | null
    manager_user_id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    team_key: string | null
    team_id: string | null
    name: string | null
    is_owned_by_current_user: boolean | null
    url: string | null
    team_logo: string | null
    waiver_priority: number | null
    number_of_moves: number | null
    number_of_trades: number | null
    league_id: number | null
    manager_user_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    team_key: string | null
    team_id: string | null
    name: string | null
    is_owned_by_current_user: boolean | null
    url: string | null
    team_logo: string | null
    waiver_priority: number | null
    number_of_moves: number | null
    number_of_trades: number | null
    league_id: number | null
    manager_user_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    team_key: number
    team_id: number
    name: number
    is_owned_by_current_user: number
    url: number
    team_logo: number
    waiver_priority: number
    number_of_moves: number
    number_of_trades: number
    league_id: number
    manager_user_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
    waiver_priority?: true
    number_of_moves?: true
    number_of_trades?: true
    league_id?: true
    manager_user_id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
    waiver_priority?: true
    number_of_moves?: true
    number_of_trades?: true
    league_id?: true
    manager_user_id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    team_key?: true
    team_id?: true
    name?: true
    is_owned_by_current_user?: true
    url?: true
    team_logo?: true
    waiver_priority?: true
    number_of_moves?: true
    number_of_trades?: true
    league_id?: true
    manager_user_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    team_key?: true
    team_id?: true
    name?: true
    is_owned_by_current_user?: true
    url?: true
    team_logo?: true
    waiver_priority?: true
    number_of_moves?: true
    number_of_trades?: true
    league_id?: true
    manager_user_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    team_key?: true
    team_id?: true
    name?: true
    is_owned_by_current_user?: true
    url?: true
    team_logo?: true
    waiver_priority?: true
    number_of_moves?: true
    number_of_trades?: true
    league_id?: true
    manager_user_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    team_key: string
    team_id: string | null
    name: string | null
    is_owned_by_current_user: boolean
    url: string | null
    team_logo: string | null
    waiver_priority: number | null
    number_of_moves: number
    number_of_trades: number
    league_id: number
    manager_user_id: number | null
    created_at: Date
    updated_at: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_key?: boolean
    team_id?: boolean
    name?: boolean
    is_owned_by_current_user?: boolean
    url?: boolean
    team_logo?: boolean
    waiver_priority?: boolean
    number_of_moves?: boolean
    number_of_trades?: boolean
    league_id?: boolean
    manager_user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    manager?: boolean | Team$managerArgs<ExtArgs>
    roster?: boolean | Team$rosterArgs<ExtArgs>
    standings?: boolean | Team$standingsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_key?: boolean
    team_id?: boolean
    name?: boolean
    is_owned_by_current_user?: boolean
    url?: boolean
    team_logo?: boolean
    waiver_priority?: boolean
    number_of_moves?: boolean
    number_of_trades?: boolean
    league_id?: boolean
    manager_user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    manager?: boolean | Team$managerArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    team_key?: boolean
    team_id?: boolean
    name?: boolean
    is_owned_by_current_user?: boolean
    url?: boolean
    team_logo?: boolean
    waiver_priority?: boolean
    number_of_moves?: boolean
    number_of_trades?: boolean
    league_id?: boolean
    manager_user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    manager?: boolean | Team$managerArgs<ExtArgs>
    roster?: boolean | Team$rosterArgs<ExtArgs>
    standings?: boolean | Team$standingsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    manager?: boolean | Team$managerArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      league: Prisma.$LeaguePayload<ExtArgs>
      manager: Prisma.$UserPayload<ExtArgs> | null
      roster: Prisma.$TeamPlayerPayload<ExtArgs>[]
      standings: Prisma.$TeamStandingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_key: string
      team_id: string | null
      name: string | null
      is_owned_by_current_user: boolean
      url: string | null
      team_logo: string | null
      waiver_priority: number | null
      number_of_moves: number
      number_of_trades: number
      league_id: number
      manager_user_id: number | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    manager<T extends Team$managerArgs<ExtArgs> = {}>(args?: Subset<T, Team$managerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    roster<T extends Team$rosterArgs<ExtArgs> = {}>(args?: Subset<T, Team$rosterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findMany"> | Null>
    standings<T extends Team$standingsArgs<ExtArgs> = {}>(args?: Subset<T, Team$standingsArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly team_key: FieldRef<"Team", 'String'>
    readonly team_id: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly is_owned_by_current_user: FieldRef<"Team", 'Boolean'>
    readonly url: FieldRef<"Team", 'String'>
    readonly team_logo: FieldRef<"Team", 'String'>
    readonly waiver_priority: FieldRef<"Team", 'Int'>
    readonly number_of_moves: FieldRef<"Team", 'Int'>
    readonly number_of_trades: FieldRef<"Team", 'Int'>
    readonly league_id: FieldRef<"Team", 'Int'>
    readonly manager_user_id: FieldRef<"Team", 'Int'>
    readonly created_at: FieldRef<"Team", 'DateTime'>
    readonly updated_at: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.manager
   */
  export type Team$managerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Team.roster
   */
  export type Team$rosterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    where?: TeamPlayerWhereInput
    orderBy?: TeamPlayerOrderByWithRelationInput | TeamPlayerOrderByWithRelationInput[]
    cursor?: TeamPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamPlayerScalarFieldEnum | TeamPlayerScalarFieldEnum[]
  }

  /**
   * Team.standings
   */
  export type Team$standingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    where?: TeamStandingWhereInput
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamStanding
   */

  export type AggregateTeamStanding = {
    _count: TeamStandingCountAggregateOutputType | null
    _avg: TeamStandingAvgAggregateOutputType | null
    _sum: TeamStandingSumAggregateOutputType | null
    _min: TeamStandingMinAggregateOutputType | null
    _max: TeamStandingMaxAggregateOutputType | null
  }

  export type TeamStandingAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
    rank: number | null
    points_for: number | null
    points_against: number | null
    wins: number | null
    losses: number | null
    ties: number | null
    percentage: number | null
  }

  export type TeamStandingSumAggregateOutputType = {
    id: number | null
    team_id: number | null
    rank: number | null
    points_for: number | null
    points_against: number | null
    wins: number | null
    losses: number | null
    ties: number | null
    percentage: number | null
  }

  export type TeamStandingMinAggregateOutputType = {
    id: number | null
    team_id: number | null
    rank: number | null
    points_for: number | null
    points_against: number | null
    wins: number | null
    losses: number | null
    ties: number | null
    percentage: number | null
    streak: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamStandingMaxAggregateOutputType = {
    id: number | null
    team_id: number | null
    rank: number | null
    points_for: number | null
    points_against: number | null
    wins: number | null
    losses: number | null
    ties: number | null
    percentage: number | null
    streak: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamStandingCountAggregateOutputType = {
    id: number
    team_id: number
    rank: number
    points_for: number
    points_against: number
    wins: number
    losses: number
    ties: number
    percentage: number
    streak: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TeamStandingAvgAggregateInputType = {
    id?: true
    team_id?: true
    rank?: true
    points_for?: true
    points_against?: true
    wins?: true
    losses?: true
    ties?: true
    percentage?: true
  }

  export type TeamStandingSumAggregateInputType = {
    id?: true
    team_id?: true
    rank?: true
    points_for?: true
    points_against?: true
    wins?: true
    losses?: true
    ties?: true
    percentage?: true
  }

  export type TeamStandingMinAggregateInputType = {
    id?: true
    team_id?: true
    rank?: true
    points_for?: true
    points_against?: true
    wins?: true
    losses?: true
    ties?: true
    percentage?: true
    streak?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamStandingMaxAggregateInputType = {
    id?: true
    team_id?: true
    rank?: true
    points_for?: true
    points_against?: true
    wins?: true
    losses?: true
    ties?: true
    percentage?: true
    streak?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamStandingCountAggregateInputType = {
    id?: true
    team_id?: true
    rank?: true
    points_for?: true
    points_against?: true
    wins?: true
    losses?: true
    ties?: true
    percentage?: true
    streak?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TeamStandingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamStanding to aggregate.
     */
    where?: TeamStandingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStandings to fetch.
     */
    orderBy?: TeamStandingOrderByWithRelationInput | TeamStandingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamStandingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStandings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamStandings
    **/
    _count?: true | TeamStandingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamStandingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamStandingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamStandingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamStandingMaxAggregateInputType
  }

  export type GetTeamStandingAggregateType<T extends TeamStandingAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamStanding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamStanding[P]>
      : GetScalarType<T[P], AggregateTeamStanding[P]>
  }




  export type TeamStandingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamStandingWhereInput
    orderBy?: TeamStandingOrderByWithAggregationInput | TeamStandingOrderByWithAggregationInput[]
    by: TeamStandingScalarFieldEnum[] | TeamStandingScalarFieldEnum
    having?: TeamStandingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamStandingCountAggregateInputType | true
    _avg?: TeamStandingAvgAggregateInputType
    _sum?: TeamStandingSumAggregateInputType
    _min?: TeamStandingMinAggregateInputType
    _max?: TeamStandingMaxAggregateInputType
  }

  export type TeamStandingGroupByOutputType = {
    id: number
    team_id: number
    rank: number | null
    points_for: number | null
    points_against: number | null
    wins: number
    losses: number
    ties: number
    percentage: number | null
    streak: string | null
    created_at: Date
    updated_at: Date
    _count: TeamStandingCountAggregateOutputType | null
    _avg: TeamStandingAvgAggregateOutputType | null
    _sum: TeamStandingSumAggregateOutputType | null
    _min: TeamStandingMinAggregateOutputType | null
    _max: TeamStandingMaxAggregateOutputType | null
  }

  type GetTeamStandingGroupByPayload<T extends TeamStandingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamStandingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamStandingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamStandingGroupByOutputType[P]>
            : GetScalarType<T[P], TeamStandingGroupByOutputType[P]>
        }
      >
    >


  export type TeamStandingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    rank?: boolean
    points_for?: boolean
    points_against?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    percentage?: boolean
    streak?: boolean
    created_at?: boolean
    updated_at?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamStanding"]>

  export type TeamStandingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    rank?: boolean
    points_for?: boolean
    points_against?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    percentage?: boolean
    streak?: boolean
    created_at?: boolean
    updated_at?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamStanding"]>

  export type TeamStandingSelectScalar = {
    id?: boolean
    team_id?: boolean
    rank?: boolean
    points_for?: boolean
    points_against?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    percentage?: boolean
    streak?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TeamStandingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TeamStandingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TeamStandingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamStanding"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_id: number
      rank: number | null
      points_for: number | null
      points_against: number | null
      wins: number
      losses: number
      ties: number
      percentage: number | null
      streak: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["teamStanding"]>
    composites: {}
  }

  type TeamStandingGetPayload<S extends boolean | null | undefined | TeamStandingDefaultArgs> = $Result.GetResult<Prisma.$TeamStandingPayload, S>

  type TeamStandingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamStandingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamStandingCountAggregateInputType | true
    }

  export interface TeamStandingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamStanding'], meta: { name: 'TeamStanding' } }
    /**
     * Find zero or one TeamStanding that matches the filter.
     * @param {TeamStandingFindUniqueArgs} args - Arguments to find a TeamStanding
     * @example
     * // Get one TeamStanding
     * const teamStanding = await prisma.teamStanding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamStandingFindUniqueArgs>(args: SelectSubset<T, TeamStandingFindUniqueArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeamStanding that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamStandingFindUniqueOrThrowArgs} args - Arguments to find a TeamStanding
     * @example
     * // Get one TeamStanding
     * const teamStanding = await prisma.teamStanding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamStandingFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamStandingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeamStanding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingFindFirstArgs} args - Arguments to find a TeamStanding
     * @example
     * // Get one TeamStanding
     * const teamStanding = await prisma.teamStanding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamStandingFindFirstArgs>(args?: SelectSubset<T, TeamStandingFindFirstArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeamStanding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingFindFirstOrThrowArgs} args - Arguments to find a TeamStanding
     * @example
     * // Get one TeamStanding
     * const teamStanding = await prisma.teamStanding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamStandingFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamStandingFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeamStandings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamStandings
     * const teamStandings = await prisma.teamStanding.findMany()
     * 
     * // Get first 10 TeamStandings
     * const teamStandings = await prisma.teamStanding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamStandingWithIdOnly = await prisma.teamStanding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamStandingFindManyArgs>(args?: SelectSubset<T, TeamStandingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeamStanding.
     * @param {TeamStandingCreateArgs} args - Arguments to create a TeamStanding.
     * @example
     * // Create one TeamStanding
     * const TeamStanding = await prisma.teamStanding.create({
     *   data: {
     *     // ... data to create a TeamStanding
     *   }
     * })
     * 
     */
    create<T extends TeamStandingCreateArgs>(args: SelectSubset<T, TeamStandingCreateArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeamStandings.
     * @param {TeamStandingCreateManyArgs} args - Arguments to create many TeamStandings.
     * @example
     * // Create many TeamStandings
     * const teamStanding = await prisma.teamStanding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamStandingCreateManyArgs>(args?: SelectSubset<T, TeamStandingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamStandings and returns the data saved in the database.
     * @param {TeamStandingCreateManyAndReturnArgs} args - Arguments to create many TeamStandings.
     * @example
     * // Create many TeamStandings
     * const teamStanding = await prisma.teamStanding.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamStandings and only return the `id`
     * const teamStandingWithIdOnly = await prisma.teamStanding.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamStandingCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamStandingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TeamStanding.
     * @param {TeamStandingDeleteArgs} args - Arguments to delete one TeamStanding.
     * @example
     * // Delete one TeamStanding
     * const TeamStanding = await prisma.teamStanding.delete({
     *   where: {
     *     // ... filter to delete one TeamStanding
     *   }
     * })
     * 
     */
    delete<T extends TeamStandingDeleteArgs>(args: SelectSubset<T, TeamStandingDeleteArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeamStanding.
     * @param {TeamStandingUpdateArgs} args - Arguments to update one TeamStanding.
     * @example
     * // Update one TeamStanding
     * const teamStanding = await prisma.teamStanding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamStandingUpdateArgs>(args: SelectSubset<T, TeamStandingUpdateArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeamStandings.
     * @param {TeamStandingDeleteManyArgs} args - Arguments to filter TeamStandings to delete.
     * @example
     * // Delete a few TeamStandings
     * const { count } = await prisma.teamStanding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamStandingDeleteManyArgs>(args?: SelectSubset<T, TeamStandingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamStandings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamStandings
     * const teamStanding = await prisma.teamStanding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamStandingUpdateManyArgs>(args: SelectSubset<T, TeamStandingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamStanding.
     * @param {TeamStandingUpsertArgs} args - Arguments to update or create a TeamStanding.
     * @example
     * // Update or create a TeamStanding
     * const teamStanding = await prisma.teamStanding.upsert({
     *   create: {
     *     // ... data to create a TeamStanding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamStanding we want to update
     *   }
     * })
     */
    upsert<T extends TeamStandingUpsertArgs>(args: SelectSubset<T, TeamStandingUpsertArgs<ExtArgs>>): Prisma__TeamStandingClient<$Result.GetResult<Prisma.$TeamStandingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeamStandings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingCountArgs} args - Arguments to filter TeamStandings to count.
     * @example
     * // Count the number of TeamStandings
     * const count = await prisma.teamStanding.count({
     *   where: {
     *     // ... the filter for the TeamStandings we want to count
     *   }
     * })
    **/
    count<T extends TeamStandingCountArgs>(
      args?: Subset<T, TeamStandingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamStandingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamStanding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamStandingAggregateArgs>(args: Subset<T, TeamStandingAggregateArgs>): Prisma.PrismaPromise<GetTeamStandingAggregateType<T>>

    /**
     * Group by TeamStanding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStandingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamStandingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamStandingGroupByArgs['orderBy'] }
        : { orderBy?: TeamStandingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamStandingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamStandingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamStanding model
   */
  readonly fields: TeamStandingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamStanding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamStandingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamStanding model
   */ 
  interface TeamStandingFieldRefs {
    readonly id: FieldRef<"TeamStanding", 'Int'>
    readonly team_id: FieldRef<"TeamStanding", 'Int'>
    readonly rank: FieldRef<"TeamStanding", 'Int'>
    readonly points_for: FieldRef<"TeamStanding", 'Float'>
    readonly points_against: FieldRef<"TeamStanding", 'Float'>
    readonly wins: FieldRef<"TeamStanding", 'Int'>
    readonly losses: FieldRef<"TeamStanding", 'Int'>
    readonly ties: FieldRef<"TeamStanding", 'Int'>
    readonly percentage: FieldRef<"TeamStanding", 'Float'>
    readonly streak: FieldRef<"TeamStanding", 'String'>
    readonly created_at: FieldRef<"TeamStanding", 'DateTime'>
    readonly updated_at: FieldRef<"TeamStanding", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamStanding findUnique
   */
  export type TeamStandingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * Filter, which TeamStanding to fetch.
     */
    where: TeamStandingWhereUniqueInput
  }

  /**
   * TeamStanding findUniqueOrThrow
   */
  export type TeamStandingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * Filter, which TeamStanding to fetch.
     */
    where: TeamStandingWhereUniqueInput
  }

  /**
   * TeamStanding findFirst
   */
  export type TeamStandingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * Filter, which TeamStanding to fetch.
     */
    where?: TeamStandingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStandings to fetch.
     */
    orderBy?: TeamStandingOrderByWithRelationInput | TeamStandingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamStandings.
     */
    cursor?: TeamStandingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStandings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamStandings.
     */
    distinct?: TeamStandingScalarFieldEnum | TeamStandingScalarFieldEnum[]
  }

  /**
   * TeamStanding findFirstOrThrow
   */
  export type TeamStandingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * Filter, which TeamStanding to fetch.
     */
    where?: TeamStandingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStandings to fetch.
     */
    orderBy?: TeamStandingOrderByWithRelationInput | TeamStandingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamStandings.
     */
    cursor?: TeamStandingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStandings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamStandings.
     */
    distinct?: TeamStandingScalarFieldEnum | TeamStandingScalarFieldEnum[]
  }

  /**
   * TeamStanding findMany
   */
  export type TeamStandingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * Filter, which TeamStandings to fetch.
     */
    where?: TeamStandingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStandings to fetch.
     */
    orderBy?: TeamStandingOrderByWithRelationInput | TeamStandingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamStandings.
     */
    cursor?: TeamStandingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStandings.
     */
    skip?: number
    distinct?: TeamStandingScalarFieldEnum | TeamStandingScalarFieldEnum[]
  }

  /**
   * TeamStanding create
   */
  export type TeamStandingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamStanding.
     */
    data: XOR<TeamStandingCreateInput, TeamStandingUncheckedCreateInput>
  }

  /**
   * TeamStanding createMany
   */
  export type TeamStandingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamStandings.
     */
    data: TeamStandingCreateManyInput | TeamStandingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamStanding createManyAndReturn
   */
  export type TeamStandingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TeamStandings.
     */
    data: TeamStandingCreateManyInput | TeamStandingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamStanding update
   */
  export type TeamStandingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamStanding.
     */
    data: XOR<TeamStandingUpdateInput, TeamStandingUncheckedUpdateInput>
    /**
     * Choose, which TeamStanding to update.
     */
    where: TeamStandingWhereUniqueInput
  }

  /**
   * TeamStanding updateMany
   */
  export type TeamStandingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamStandings.
     */
    data: XOR<TeamStandingUpdateManyMutationInput, TeamStandingUncheckedUpdateManyInput>
    /**
     * Filter which TeamStandings to update
     */
    where?: TeamStandingWhereInput
  }

  /**
   * TeamStanding upsert
   */
  export type TeamStandingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamStanding to update in case it exists.
     */
    where: TeamStandingWhereUniqueInput
    /**
     * In case the TeamStanding found by the `where` argument doesn't exist, create a new TeamStanding with this data.
     */
    create: XOR<TeamStandingCreateInput, TeamStandingUncheckedCreateInput>
    /**
     * In case the TeamStanding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamStandingUpdateInput, TeamStandingUncheckedUpdateInput>
  }

  /**
   * TeamStanding delete
   */
  export type TeamStandingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
    /**
     * Filter which TeamStanding to delete.
     */
    where: TeamStandingWhereUniqueInput
  }

  /**
   * TeamStanding deleteMany
   */
  export type TeamStandingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamStandings to delete
     */
    where?: TeamStandingWhereInput
  }

  /**
   * TeamStanding without action
   */
  export type TeamStandingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStanding
     */
    select?: TeamStandingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStandingInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    player_key: string | null
    player_id: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    editorial_player_key: string | null
    editorial_team_key: string | null
    editorial_team_full_name: string | null
    editorial_team_abbr: string | null
    uniform_number: string | null
    display_position: string | null
    headshot_url: string | null
    is_undroppable: boolean | null
    position_type: string | null
    eligible_positions: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    player_key: string | null
    player_id: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    editorial_player_key: string | null
    editorial_team_key: string | null
    editorial_team_full_name: string | null
    editorial_team_abbr: string | null
    uniform_number: string | null
    display_position: string | null
    headshot_url: string | null
    is_undroppable: boolean | null
    position_type: string | null
    eligible_positions: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    player_key: number
    player_id: number
    name: number
    first_name: number
    last_name: number
    editorial_player_key: number
    editorial_team_key: number
    editorial_team_full_name: number
    editorial_team_abbr: number
    uniform_number: number
    display_position: number
    headshot_url: number
    is_undroppable: number
    position_type: number
    eligible_positions: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    player_key?: true
    player_id?: true
    name?: true
    first_name?: true
    last_name?: true
    editorial_player_key?: true
    editorial_team_key?: true
    editorial_team_full_name?: true
    editorial_team_abbr?: true
    uniform_number?: true
    display_position?: true
    headshot_url?: true
    is_undroppable?: true
    position_type?: true
    eligible_positions?: true
    created_at?: true
    updated_at?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    player_key?: true
    player_id?: true
    name?: true
    first_name?: true
    last_name?: true
    editorial_player_key?: true
    editorial_team_key?: true
    editorial_team_full_name?: true
    editorial_team_abbr?: true
    uniform_number?: true
    display_position?: true
    headshot_url?: true
    is_undroppable?: true
    position_type?: true
    eligible_positions?: true
    created_at?: true
    updated_at?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    player_key?: true
    player_id?: true
    name?: true
    first_name?: true
    last_name?: true
    editorial_player_key?: true
    editorial_team_key?: true
    editorial_team_full_name?: true
    editorial_team_abbr?: true
    uniform_number?: true
    display_position?: true
    headshot_url?: true
    is_undroppable?: true
    position_type?: true
    eligible_positions?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    player_key: string
    player_id: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    editorial_player_key: string | null
    editorial_team_key: string | null
    editorial_team_full_name: string | null
    editorial_team_abbr: string | null
    uniform_number: string | null
    display_position: string | null
    headshot_url: string | null
    is_undroppable: boolean
    position_type: string | null
    eligible_positions: string | null
    created_at: Date
    updated_at: Date
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    player_key?: boolean
    player_id?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    editorial_player_key?: boolean
    editorial_team_key?: boolean
    editorial_team_full_name?: boolean
    editorial_team_abbr?: boolean
    uniform_number?: boolean
    display_position?: boolean
    headshot_url?: boolean
    is_undroppable?: boolean
    position_type?: boolean
    eligible_positions?: boolean
    created_at?: boolean
    updated_at?: boolean
    teams?: boolean | Player$teamsArgs<ExtArgs>
    stats?: boolean | Player$statsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    player_key?: boolean
    player_id?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    editorial_player_key?: boolean
    editorial_team_key?: boolean
    editorial_team_full_name?: boolean
    editorial_team_abbr?: boolean
    uniform_number?: boolean
    display_position?: boolean
    headshot_url?: boolean
    is_undroppable?: boolean
    position_type?: boolean
    eligible_positions?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    player_key?: boolean
    player_id?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    editorial_player_key?: boolean
    editorial_team_key?: boolean
    editorial_team_full_name?: boolean
    editorial_team_abbr?: boolean
    uniform_number?: boolean
    display_position?: boolean
    headshot_url?: boolean
    is_undroppable?: boolean
    position_type?: boolean
    eligible_positions?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | Player$teamsArgs<ExtArgs>
    stats?: boolean | Player$statsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      teams: Prisma.$TeamPlayerPayload<ExtArgs>[]
      stats: Prisma.$PlayerStatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      player_key: string
      player_id: string | null
      name: string | null
      first_name: string | null
      last_name: string | null
      editorial_player_key: string | null
      editorial_team_key: string | null
      editorial_team_full_name: string | null
      editorial_team_abbr: string | null
      uniform_number: string | null
      display_position: string | null
      headshot_url: string | null
      is_undroppable: boolean
      position_type: string | null
      eligible_positions: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teams<T extends Player$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Player$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findMany"> | Null>
    stats<T extends Player$statsArgs<ExtArgs> = {}>(args?: Subset<T, Player$statsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly player_key: FieldRef<"Player", 'String'>
    readonly player_id: FieldRef<"Player", 'String'>
    readonly name: FieldRef<"Player", 'String'>
    readonly first_name: FieldRef<"Player", 'String'>
    readonly last_name: FieldRef<"Player", 'String'>
    readonly editorial_player_key: FieldRef<"Player", 'String'>
    readonly editorial_team_key: FieldRef<"Player", 'String'>
    readonly editorial_team_full_name: FieldRef<"Player", 'String'>
    readonly editorial_team_abbr: FieldRef<"Player", 'String'>
    readonly uniform_number: FieldRef<"Player", 'String'>
    readonly display_position: FieldRef<"Player", 'String'>
    readonly headshot_url: FieldRef<"Player", 'String'>
    readonly is_undroppable: FieldRef<"Player", 'Boolean'>
    readonly position_type: FieldRef<"Player", 'String'>
    readonly eligible_positions: FieldRef<"Player", 'String'>
    readonly created_at: FieldRef<"Player", 'DateTime'>
    readonly updated_at: FieldRef<"Player", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }

  /**
   * Player.teams
   */
  export type Player$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    where?: TeamPlayerWhereInput
    orderBy?: TeamPlayerOrderByWithRelationInput | TeamPlayerOrderByWithRelationInput[]
    cursor?: TeamPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamPlayerScalarFieldEnum | TeamPlayerScalarFieldEnum[]
  }

  /**
   * Player.stats
   */
  export type Player$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    where?: PlayerStatWhereInput
    orderBy?: PlayerStatOrderByWithRelationInput | PlayerStatOrderByWithRelationInput[]
    cursor?: PlayerStatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerStatScalarFieldEnum | PlayerStatScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model TeamPlayer
   */

  export type AggregateTeamPlayer = {
    _count: TeamPlayerCountAggregateOutputType | null
    _avg: TeamPlayerAvgAggregateOutputType | null
    _sum: TeamPlayerSumAggregateOutputType | null
    _min: TeamPlayerMinAggregateOutputType | null
    _max: TeamPlayerMaxAggregateOutputType | null
  }

  export type TeamPlayerAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
    player_id: number | null
  }

  export type TeamPlayerSumAggregateOutputType = {
    id: number | null
    team_id: number | null
    player_id: number | null
  }

  export type TeamPlayerMinAggregateOutputType = {
    id: number | null
    team_id: number | null
    player_id: number | null
    position: string | null
    selected_position: string | null
    is_starting: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamPlayerMaxAggregateOutputType = {
    id: number | null
    team_id: number | null
    player_id: number | null
    position: string | null
    selected_position: string | null
    is_starting: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamPlayerCountAggregateOutputType = {
    id: number
    team_id: number
    player_id: number
    position: number
    selected_position: number
    is_starting: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TeamPlayerAvgAggregateInputType = {
    id?: true
    team_id?: true
    player_id?: true
  }

  export type TeamPlayerSumAggregateInputType = {
    id?: true
    team_id?: true
    player_id?: true
  }

  export type TeamPlayerMinAggregateInputType = {
    id?: true
    team_id?: true
    player_id?: true
    position?: true
    selected_position?: true
    is_starting?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamPlayerMaxAggregateInputType = {
    id?: true
    team_id?: true
    player_id?: true
    position?: true
    selected_position?: true
    is_starting?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamPlayerCountAggregateInputType = {
    id?: true
    team_id?: true
    player_id?: true
    position?: true
    selected_position?: true
    is_starting?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TeamPlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamPlayer to aggregate.
     */
    where?: TeamPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamPlayers to fetch.
     */
    orderBy?: TeamPlayerOrderByWithRelationInput | TeamPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamPlayers
    **/
    _count?: true | TeamPlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamPlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamPlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamPlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamPlayerMaxAggregateInputType
  }

  export type GetTeamPlayerAggregateType<T extends TeamPlayerAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamPlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamPlayer[P]>
      : GetScalarType<T[P], AggregateTeamPlayer[P]>
  }




  export type TeamPlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamPlayerWhereInput
    orderBy?: TeamPlayerOrderByWithAggregationInput | TeamPlayerOrderByWithAggregationInput[]
    by: TeamPlayerScalarFieldEnum[] | TeamPlayerScalarFieldEnum
    having?: TeamPlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamPlayerCountAggregateInputType | true
    _avg?: TeamPlayerAvgAggregateInputType
    _sum?: TeamPlayerSumAggregateInputType
    _min?: TeamPlayerMinAggregateInputType
    _max?: TeamPlayerMaxAggregateInputType
  }

  export type TeamPlayerGroupByOutputType = {
    id: number
    team_id: number
    player_id: number
    position: string | null
    selected_position: string | null
    is_starting: boolean
    created_at: Date
    updated_at: Date
    _count: TeamPlayerCountAggregateOutputType | null
    _avg: TeamPlayerAvgAggregateOutputType | null
    _sum: TeamPlayerSumAggregateOutputType | null
    _min: TeamPlayerMinAggregateOutputType | null
    _max: TeamPlayerMaxAggregateOutputType | null
  }

  type GetTeamPlayerGroupByPayload<T extends TeamPlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamPlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamPlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamPlayerGroupByOutputType[P]>
            : GetScalarType<T[P], TeamPlayerGroupByOutputType[P]>
        }
      >
    >


  export type TeamPlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    player_id?: boolean
    position?: boolean
    selected_position?: boolean
    is_starting?: boolean
    created_at?: boolean
    updated_at?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamPlayer"]>

  export type TeamPlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    player_id?: boolean
    position?: boolean
    selected_position?: boolean
    is_starting?: boolean
    created_at?: boolean
    updated_at?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamPlayer"]>

  export type TeamPlayerSelectScalar = {
    id?: boolean
    team_id?: boolean
    player_id?: boolean
    position?: boolean
    selected_position?: boolean
    is_starting?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TeamPlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type TeamPlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $TeamPlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamPlayer"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_id: number
      player_id: number
      position: string | null
      selected_position: string | null
      is_starting: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["teamPlayer"]>
    composites: {}
  }

  type TeamPlayerGetPayload<S extends boolean | null | undefined | TeamPlayerDefaultArgs> = $Result.GetResult<Prisma.$TeamPlayerPayload, S>

  type TeamPlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamPlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamPlayerCountAggregateInputType | true
    }

  export interface TeamPlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamPlayer'], meta: { name: 'TeamPlayer' } }
    /**
     * Find zero or one TeamPlayer that matches the filter.
     * @param {TeamPlayerFindUniqueArgs} args - Arguments to find a TeamPlayer
     * @example
     * // Get one TeamPlayer
     * const teamPlayer = await prisma.teamPlayer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamPlayerFindUniqueArgs>(args: SelectSubset<T, TeamPlayerFindUniqueArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeamPlayer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamPlayerFindUniqueOrThrowArgs} args - Arguments to find a TeamPlayer
     * @example
     * // Get one TeamPlayer
     * const teamPlayer = await prisma.teamPlayer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamPlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamPlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeamPlayer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerFindFirstArgs} args - Arguments to find a TeamPlayer
     * @example
     * // Get one TeamPlayer
     * const teamPlayer = await prisma.teamPlayer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamPlayerFindFirstArgs>(args?: SelectSubset<T, TeamPlayerFindFirstArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeamPlayer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerFindFirstOrThrowArgs} args - Arguments to find a TeamPlayer
     * @example
     * // Get one TeamPlayer
     * const teamPlayer = await prisma.teamPlayer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamPlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamPlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeamPlayers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamPlayers
     * const teamPlayers = await prisma.teamPlayer.findMany()
     * 
     * // Get first 10 TeamPlayers
     * const teamPlayers = await prisma.teamPlayer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamPlayerWithIdOnly = await prisma.teamPlayer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamPlayerFindManyArgs>(args?: SelectSubset<T, TeamPlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeamPlayer.
     * @param {TeamPlayerCreateArgs} args - Arguments to create a TeamPlayer.
     * @example
     * // Create one TeamPlayer
     * const TeamPlayer = await prisma.teamPlayer.create({
     *   data: {
     *     // ... data to create a TeamPlayer
     *   }
     * })
     * 
     */
    create<T extends TeamPlayerCreateArgs>(args: SelectSubset<T, TeamPlayerCreateArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeamPlayers.
     * @param {TeamPlayerCreateManyArgs} args - Arguments to create many TeamPlayers.
     * @example
     * // Create many TeamPlayers
     * const teamPlayer = await prisma.teamPlayer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamPlayerCreateManyArgs>(args?: SelectSubset<T, TeamPlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamPlayers and returns the data saved in the database.
     * @param {TeamPlayerCreateManyAndReturnArgs} args - Arguments to create many TeamPlayers.
     * @example
     * // Create many TeamPlayers
     * const teamPlayer = await prisma.teamPlayer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamPlayers and only return the `id`
     * const teamPlayerWithIdOnly = await prisma.teamPlayer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamPlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamPlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TeamPlayer.
     * @param {TeamPlayerDeleteArgs} args - Arguments to delete one TeamPlayer.
     * @example
     * // Delete one TeamPlayer
     * const TeamPlayer = await prisma.teamPlayer.delete({
     *   where: {
     *     // ... filter to delete one TeamPlayer
     *   }
     * })
     * 
     */
    delete<T extends TeamPlayerDeleteArgs>(args: SelectSubset<T, TeamPlayerDeleteArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeamPlayer.
     * @param {TeamPlayerUpdateArgs} args - Arguments to update one TeamPlayer.
     * @example
     * // Update one TeamPlayer
     * const teamPlayer = await prisma.teamPlayer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamPlayerUpdateArgs>(args: SelectSubset<T, TeamPlayerUpdateArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeamPlayers.
     * @param {TeamPlayerDeleteManyArgs} args - Arguments to filter TeamPlayers to delete.
     * @example
     * // Delete a few TeamPlayers
     * const { count } = await prisma.teamPlayer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamPlayerDeleteManyArgs>(args?: SelectSubset<T, TeamPlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamPlayers
     * const teamPlayer = await prisma.teamPlayer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamPlayerUpdateManyArgs>(args: SelectSubset<T, TeamPlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamPlayer.
     * @param {TeamPlayerUpsertArgs} args - Arguments to update or create a TeamPlayer.
     * @example
     * // Update or create a TeamPlayer
     * const teamPlayer = await prisma.teamPlayer.upsert({
     *   create: {
     *     // ... data to create a TeamPlayer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamPlayer we want to update
     *   }
     * })
     */
    upsert<T extends TeamPlayerUpsertArgs>(args: SelectSubset<T, TeamPlayerUpsertArgs<ExtArgs>>): Prisma__TeamPlayerClient<$Result.GetResult<Prisma.$TeamPlayerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeamPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerCountArgs} args - Arguments to filter TeamPlayers to count.
     * @example
     * // Count the number of TeamPlayers
     * const count = await prisma.teamPlayer.count({
     *   where: {
     *     // ... the filter for the TeamPlayers we want to count
     *   }
     * })
    **/
    count<T extends TeamPlayerCountArgs>(
      args?: Subset<T, TeamPlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamPlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamPlayerAggregateArgs>(args: Subset<T, TeamPlayerAggregateArgs>): Prisma.PrismaPromise<GetTeamPlayerAggregateType<T>>

    /**
     * Group by TeamPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamPlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamPlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamPlayerGroupByArgs['orderBy'] }
        : { orderBy?: TeamPlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamPlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamPlayer model
   */
  readonly fields: TeamPlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamPlayer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamPlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamPlayer model
   */ 
  interface TeamPlayerFieldRefs {
    readonly id: FieldRef<"TeamPlayer", 'Int'>
    readonly team_id: FieldRef<"TeamPlayer", 'Int'>
    readonly player_id: FieldRef<"TeamPlayer", 'Int'>
    readonly position: FieldRef<"TeamPlayer", 'String'>
    readonly selected_position: FieldRef<"TeamPlayer", 'String'>
    readonly is_starting: FieldRef<"TeamPlayer", 'Boolean'>
    readonly created_at: FieldRef<"TeamPlayer", 'DateTime'>
    readonly updated_at: FieldRef<"TeamPlayer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamPlayer findUnique
   */
  export type TeamPlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * Filter, which TeamPlayer to fetch.
     */
    where: TeamPlayerWhereUniqueInput
  }

  /**
   * TeamPlayer findUniqueOrThrow
   */
  export type TeamPlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * Filter, which TeamPlayer to fetch.
     */
    where: TeamPlayerWhereUniqueInput
  }

  /**
   * TeamPlayer findFirst
   */
  export type TeamPlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * Filter, which TeamPlayer to fetch.
     */
    where?: TeamPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamPlayers to fetch.
     */
    orderBy?: TeamPlayerOrderByWithRelationInput | TeamPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamPlayers.
     */
    cursor?: TeamPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamPlayers.
     */
    distinct?: TeamPlayerScalarFieldEnum | TeamPlayerScalarFieldEnum[]
  }

  /**
   * TeamPlayer findFirstOrThrow
   */
  export type TeamPlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * Filter, which TeamPlayer to fetch.
     */
    where?: TeamPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamPlayers to fetch.
     */
    orderBy?: TeamPlayerOrderByWithRelationInput | TeamPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamPlayers.
     */
    cursor?: TeamPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamPlayers.
     */
    distinct?: TeamPlayerScalarFieldEnum | TeamPlayerScalarFieldEnum[]
  }

  /**
   * TeamPlayer findMany
   */
  export type TeamPlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * Filter, which TeamPlayers to fetch.
     */
    where?: TeamPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamPlayers to fetch.
     */
    orderBy?: TeamPlayerOrderByWithRelationInput | TeamPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamPlayers.
     */
    cursor?: TeamPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamPlayers.
     */
    skip?: number
    distinct?: TeamPlayerScalarFieldEnum | TeamPlayerScalarFieldEnum[]
  }

  /**
   * TeamPlayer create
   */
  export type TeamPlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamPlayer.
     */
    data: XOR<TeamPlayerCreateInput, TeamPlayerUncheckedCreateInput>
  }

  /**
   * TeamPlayer createMany
   */
  export type TeamPlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamPlayers.
     */
    data: TeamPlayerCreateManyInput | TeamPlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamPlayer createManyAndReturn
   */
  export type TeamPlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TeamPlayers.
     */
    data: TeamPlayerCreateManyInput | TeamPlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamPlayer update
   */
  export type TeamPlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamPlayer.
     */
    data: XOR<TeamPlayerUpdateInput, TeamPlayerUncheckedUpdateInput>
    /**
     * Choose, which TeamPlayer to update.
     */
    where: TeamPlayerWhereUniqueInput
  }

  /**
   * TeamPlayer updateMany
   */
  export type TeamPlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamPlayers.
     */
    data: XOR<TeamPlayerUpdateManyMutationInput, TeamPlayerUncheckedUpdateManyInput>
    /**
     * Filter which TeamPlayers to update
     */
    where?: TeamPlayerWhereInput
  }

  /**
   * TeamPlayer upsert
   */
  export type TeamPlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamPlayer to update in case it exists.
     */
    where: TeamPlayerWhereUniqueInput
    /**
     * In case the TeamPlayer found by the `where` argument doesn't exist, create a new TeamPlayer with this data.
     */
    create: XOR<TeamPlayerCreateInput, TeamPlayerUncheckedCreateInput>
    /**
     * In case the TeamPlayer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamPlayerUpdateInput, TeamPlayerUncheckedUpdateInput>
  }

  /**
   * TeamPlayer delete
   */
  export type TeamPlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
    /**
     * Filter which TeamPlayer to delete.
     */
    where: TeamPlayerWhereUniqueInput
  }

  /**
   * TeamPlayer deleteMany
   */
  export type TeamPlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamPlayers to delete
     */
    where?: TeamPlayerWhereInput
  }

  /**
   * TeamPlayer without action
   */
  export type TeamPlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamPlayer
     */
    select?: TeamPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamPlayerInclude<ExtArgs> | null
  }


  /**
   * Model PlayerStat
   */

  export type AggregatePlayerStat = {
    _count: PlayerStatCountAggregateOutputType | null
    _avg: PlayerStatAvgAggregateOutputType | null
    _sum: PlayerStatSumAggregateOutputType | null
    _min: PlayerStatMinAggregateOutputType | null
    _max: PlayerStatMaxAggregateOutputType | null
  }

  export type PlayerStatAvgAggregateOutputType = {
    id: number | null
    player_id: number | null
    game_id: number | null
    week: number | null
  }

  export type PlayerStatSumAggregateOutputType = {
    id: number | null
    player_id: number | null
    game_id: number | null
    week: number | null
  }

  export type PlayerStatMinAggregateOutputType = {
    id: number | null
    player_id: number | null
    game_id: number | null
    season: string | null
    week: number | null
    stats_data: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PlayerStatMaxAggregateOutputType = {
    id: number | null
    player_id: number | null
    game_id: number | null
    season: string | null
    week: number | null
    stats_data: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PlayerStatCountAggregateOutputType = {
    id: number
    player_id: number
    game_id: number
    season: number
    week: number
    stats_data: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PlayerStatAvgAggregateInputType = {
    id?: true
    player_id?: true
    game_id?: true
    week?: true
  }

  export type PlayerStatSumAggregateInputType = {
    id?: true
    player_id?: true
    game_id?: true
    week?: true
  }

  export type PlayerStatMinAggregateInputType = {
    id?: true
    player_id?: true
    game_id?: true
    season?: true
    week?: true
    stats_data?: true
    created_at?: true
    updated_at?: true
  }

  export type PlayerStatMaxAggregateInputType = {
    id?: true
    player_id?: true
    game_id?: true
    season?: true
    week?: true
    stats_data?: true
    created_at?: true
    updated_at?: true
  }

  export type PlayerStatCountAggregateInputType = {
    id?: true
    player_id?: true
    game_id?: true
    season?: true
    week?: true
    stats_data?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PlayerStatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerStat to aggregate.
     */
    where?: PlayerStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatOrderByWithRelationInput | PlayerStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerStats
    **/
    _count?: true | PlayerStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerStatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerStatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerStatMaxAggregateInputType
  }

  export type GetPlayerStatAggregateType<T extends PlayerStatAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerStat[P]>
      : GetScalarType<T[P], AggregatePlayerStat[P]>
  }




  export type PlayerStatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerStatWhereInput
    orderBy?: PlayerStatOrderByWithAggregationInput | PlayerStatOrderByWithAggregationInput[]
    by: PlayerStatScalarFieldEnum[] | PlayerStatScalarFieldEnum
    having?: PlayerStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerStatCountAggregateInputType | true
    _avg?: PlayerStatAvgAggregateInputType
    _sum?: PlayerStatSumAggregateInputType
    _min?: PlayerStatMinAggregateInputType
    _max?: PlayerStatMaxAggregateInputType
  }

  export type PlayerStatGroupByOutputType = {
    id: number
    player_id: number
    game_id: number
    season: string | null
    week: number | null
    stats_data: string | null
    created_at: Date
    updated_at: Date
    _count: PlayerStatCountAggregateOutputType | null
    _avg: PlayerStatAvgAggregateOutputType | null
    _sum: PlayerStatSumAggregateOutputType | null
    _min: PlayerStatMinAggregateOutputType | null
    _max: PlayerStatMaxAggregateOutputType | null
  }

  type GetPlayerStatGroupByPayload<T extends PlayerStatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerStatGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerStatGroupByOutputType[P]>
        }
      >
    >


  export type PlayerStatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    player_id?: boolean
    game_id?: boolean
    season?: boolean
    week?: boolean
    stats_data?: boolean
    created_at?: boolean
    updated_at?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerStat"]>

  export type PlayerStatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    player_id?: boolean
    game_id?: boolean
    season?: boolean
    week?: boolean
    stats_data?: boolean
    created_at?: boolean
    updated_at?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerStat"]>

  export type PlayerStatSelectScalar = {
    id?: boolean
    player_id?: boolean
    game_id?: boolean
    season?: boolean
    week?: boolean
    stats_data?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PlayerStatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type PlayerStatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $PlayerStatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerStat"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      player_id: number
      game_id: number
      season: string | null
      week: number | null
      stats_data: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["playerStat"]>
    composites: {}
  }

  type PlayerStatGetPayload<S extends boolean | null | undefined | PlayerStatDefaultArgs> = $Result.GetResult<Prisma.$PlayerStatPayload, S>

  type PlayerStatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerStatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerStatCountAggregateInputType | true
    }

  export interface PlayerStatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerStat'], meta: { name: 'PlayerStat' } }
    /**
     * Find zero or one PlayerStat that matches the filter.
     * @param {PlayerStatFindUniqueArgs} args - Arguments to find a PlayerStat
     * @example
     * // Get one PlayerStat
     * const playerStat = await prisma.playerStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerStatFindUniqueArgs>(args: SelectSubset<T, PlayerStatFindUniqueArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlayerStat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerStatFindUniqueOrThrowArgs} args - Arguments to find a PlayerStat
     * @example
     * // Get one PlayerStat
     * const playerStat = await prisma.playerStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerStatFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerStatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlayerStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatFindFirstArgs} args - Arguments to find a PlayerStat
     * @example
     * // Get one PlayerStat
     * const playerStat = await prisma.playerStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerStatFindFirstArgs>(args?: SelectSubset<T, PlayerStatFindFirstArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlayerStat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatFindFirstOrThrowArgs} args - Arguments to find a PlayerStat
     * @example
     * // Get one PlayerStat
     * const playerStat = await prisma.playerStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerStatFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerStatFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlayerStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerStats
     * const playerStats = await prisma.playerStat.findMany()
     * 
     * // Get first 10 PlayerStats
     * const playerStats = await prisma.playerStat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerStatWithIdOnly = await prisma.playerStat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerStatFindManyArgs>(args?: SelectSubset<T, PlayerStatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlayerStat.
     * @param {PlayerStatCreateArgs} args - Arguments to create a PlayerStat.
     * @example
     * // Create one PlayerStat
     * const PlayerStat = await prisma.playerStat.create({
     *   data: {
     *     // ... data to create a PlayerStat
     *   }
     * })
     * 
     */
    create<T extends PlayerStatCreateArgs>(args: SelectSubset<T, PlayerStatCreateArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlayerStats.
     * @param {PlayerStatCreateManyArgs} args - Arguments to create many PlayerStats.
     * @example
     * // Create many PlayerStats
     * const playerStat = await prisma.playerStat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerStatCreateManyArgs>(args?: SelectSubset<T, PlayerStatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerStats and returns the data saved in the database.
     * @param {PlayerStatCreateManyAndReturnArgs} args - Arguments to create many PlayerStats.
     * @example
     * // Create many PlayerStats
     * const playerStat = await prisma.playerStat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerStats and only return the `id`
     * const playerStatWithIdOnly = await prisma.playerStat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerStatCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerStatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PlayerStat.
     * @param {PlayerStatDeleteArgs} args - Arguments to delete one PlayerStat.
     * @example
     * // Delete one PlayerStat
     * const PlayerStat = await prisma.playerStat.delete({
     *   where: {
     *     // ... filter to delete one PlayerStat
     *   }
     * })
     * 
     */
    delete<T extends PlayerStatDeleteArgs>(args: SelectSubset<T, PlayerStatDeleteArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlayerStat.
     * @param {PlayerStatUpdateArgs} args - Arguments to update one PlayerStat.
     * @example
     * // Update one PlayerStat
     * const playerStat = await prisma.playerStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerStatUpdateArgs>(args: SelectSubset<T, PlayerStatUpdateArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlayerStats.
     * @param {PlayerStatDeleteManyArgs} args - Arguments to filter PlayerStats to delete.
     * @example
     * // Delete a few PlayerStats
     * const { count } = await prisma.playerStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerStatDeleteManyArgs>(args?: SelectSubset<T, PlayerStatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerStats
     * const playerStat = await prisma.playerStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerStatUpdateManyArgs>(args: SelectSubset<T, PlayerStatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerStat.
     * @param {PlayerStatUpsertArgs} args - Arguments to update or create a PlayerStat.
     * @example
     * // Update or create a PlayerStat
     * const playerStat = await prisma.playerStat.upsert({
     *   create: {
     *     // ... data to create a PlayerStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerStat we want to update
     *   }
     * })
     */
    upsert<T extends PlayerStatUpsertArgs>(args: SelectSubset<T, PlayerStatUpsertArgs<ExtArgs>>): Prisma__PlayerStatClient<$Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlayerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatCountArgs} args - Arguments to filter PlayerStats to count.
     * @example
     * // Count the number of PlayerStats
     * const count = await prisma.playerStat.count({
     *   where: {
     *     // ... the filter for the PlayerStats we want to count
     *   }
     * })
    **/
    count<T extends PlayerStatCountArgs>(
      args?: Subset<T, PlayerStatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerStatAggregateArgs>(args: Subset<T, PlayerStatAggregateArgs>): Prisma.PrismaPromise<GetPlayerStatAggregateType<T>>

    /**
     * Group by PlayerStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerStatGroupByArgs['orderBy'] }
        : { orderBy?: PlayerStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerStat model
   */
  readonly fields: PlayerStatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerStatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerStat model
   */ 
  interface PlayerStatFieldRefs {
    readonly id: FieldRef<"PlayerStat", 'Int'>
    readonly player_id: FieldRef<"PlayerStat", 'Int'>
    readonly game_id: FieldRef<"PlayerStat", 'Int'>
    readonly season: FieldRef<"PlayerStat", 'String'>
    readonly week: FieldRef<"PlayerStat", 'Int'>
    readonly stats_data: FieldRef<"PlayerStat", 'String'>
    readonly created_at: FieldRef<"PlayerStat", 'DateTime'>
    readonly updated_at: FieldRef<"PlayerStat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlayerStat findUnique
   */
  export type PlayerStatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStat to fetch.
     */
    where: PlayerStatWhereUniqueInput
  }

  /**
   * PlayerStat findUniqueOrThrow
   */
  export type PlayerStatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStat to fetch.
     */
    where: PlayerStatWhereUniqueInput
  }

  /**
   * PlayerStat findFirst
   */
  export type PlayerStatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStat to fetch.
     */
    where?: PlayerStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatOrderByWithRelationInput | PlayerStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerStats.
     */
    cursor?: PlayerStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerStats.
     */
    distinct?: PlayerStatScalarFieldEnum | PlayerStatScalarFieldEnum[]
  }

  /**
   * PlayerStat findFirstOrThrow
   */
  export type PlayerStatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStat to fetch.
     */
    where?: PlayerStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatOrderByWithRelationInput | PlayerStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerStats.
     */
    cursor?: PlayerStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerStats.
     */
    distinct?: PlayerStatScalarFieldEnum | PlayerStatScalarFieldEnum[]
  }

  /**
   * PlayerStat findMany
   */
  export type PlayerStatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStats to fetch.
     */
    where?: PlayerStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatOrderByWithRelationInput | PlayerStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerStats.
     */
    cursor?: PlayerStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    distinct?: PlayerStatScalarFieldEnum | PlayerStatScalarFieldEnum[]
  }

  /**
   * PlayerStat create
   */
  export type PlayerStatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerStat.
     */
    data: XOR<PlayerStatCreateInput, PlayerStatUncheckedCreateInput>
  }

  /**
   * PlayerStat createMany
   */
  export type PlayerStatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerStats.
     */
    data: PlayerStatCreateManyInput | PlayerStatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerStat createManyAndReturn
   */
  export type PlayerStatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PlayerStats.
     */
    data: PlayerStatCreateManyInput | PlayerStatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerStat update
   */
  export type PlayerStatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerStat.
     */
    data: XOR<PlayerStatUpdateInput, PlayerStatUncheckedUpdateInput>
    /**
     * Choose, which PlayerStat to update.
     */
    where: PlayerStatWhereUniqueInput
  }

  /**
   * PlayerStat updateMany
   */
  export type PlayerStatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerStats.
     */
    data: XOR<PlayerStatUpdateManyMutationInput, PlayerStatUncheckedUpdateManyInput>
    /**
     * Filter which PlayerStats to update
     */
    where?: PlayerStatWhereInput
  }

  /**
   * PlayerStat upsert
   */
  export type PlayerStatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerStat to update in case it exists.
     */
    where: PlayerStatWhereUniqueInput
    /**
     * In case the PlayerStat found by the `where` argument doesn't exist, create a new PlayerStat with this data.
     */
    create: XOR<PlayerStatCreateInput, PlayerStatUncheckedCreateInput>
    /**
     * In case the PlayerStat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerStatUpdateInput, PlayerStatUncheckedUpdateInput>
  }

  /**
   * PlayerStat delete
   */
  export type PlayerStatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
    /**
     * Filter which PlayerStat to delete.
     */
    where: PlayerStatWhereUniqueInput
  }

  /**
   * PlayerStat deleteMany
   */
  export type PlayerStatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerStats to delete
     */
    where?: PlayerStatWhereInput
  }

  /**
   * PlayerStat without action
   */
  export type PlayerStatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStat
     */
    select?: PlayerStatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    yahoo_guid: 'yahoo_guid',
    name: 'name',
    nickname: 'nickname',
    email: 'email',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    game_key: 'game_key',
    game_id: 'game_id',
    name: 'name',
    code: 'code',
    type: 'type',
    url: 'url',
    season: 'season',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const UserGameScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    game_id: 'game_id',
    created_at: 'created_at'
  };

  export type UserGameScalarFieldEnum = (typeof UserGameScalarFieldEnum)[keyof typeof UserGameScalarFieldEnum]


  export const LeagueScalarFieldEnum: {
    id: 'id',
    league_key: 'league_key',
    league_id: 'league_id',
    name: 'name',
    url: 'url',
    draft_status: 'draft_status',
    num_teams: 'num_teams',
    scoring_type: 'scoring_type',
    current_week: 'current_week',
    start_week: 'start_week',
    end_week: 'end_week',
    start_date: 'start_date',
    end_date: 'end_date',
    game_id: 'game_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LeagueScalarFieldEnum = (typeof LeagueScalarFieldEnum)[keyof typeof LeagueScalarFieldEnum]


  export const LeagueSettingScalarFieldEnum: {
    id: 'id',
    league_id: 'league_id',
    settings_data: 'settings_data',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LeagueSettingScalarFieldEnum = (typeof LeagueSettingScalarFieldEnum)[keyof typeof LeagueSettingScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    team_key: 'team_key',
    team_id: 'team_id',
    name: 'name',
    is_owned_by_current_user: 'is_owned_by_current_user',
    url: 'url',
    team_logo: 'team_logo',
    waiver_priority: 'waiver_priority',
    number_of_moves: 'number_of_moves',
    number_of_trades: 'number_of_trades',
    league_id: 'league_id',
    manager_user_id: 'manager_user_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamStandingScalarFieldEnum: {
    id: 'id',
    team_id: 'team_id',
    rank: 'rank',
    points_for: 'points_for',
    points_against: 'points_against',
    wins: 'wins',
    losses: 'losses',
    ties: 'ties',
    percentage: 'percentage',
    streak: 'streak',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TeamStandingScalarFieldEnum = (typeof TeamStandingScalarFieldEnum)[keyof typeof TeamStandingScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    player_key: 'player_key',
    player_id: 'player_id',
    name: 'name',
    first_name: 'first_name',
    last_name: 'last_name',
    editorial_player_key: 'editorial_player_key',
    editorial_team_key: 'editorial_team_key',
    editorial_team_full_name: 'editorial_team_full_name',
    editorial_team_abbr: 'editorial_team_abbr',
    uniform_number: 'uniform_number',
    display_position: 'display_position',
    headshot_url: 'headshot_url',
    is_undroppable: 'is_undroppable',
    position_type: 'position_type',
    eligible_positions: 'eligible_positions',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const TeamPlayerScalarFieldEnum: {
    id: 'id',
    team_id: 'team_id',
    player_id: 'player_id',
    position: 'position',
    selected_position: 'selected_position',
    is_starting: 'is_starting',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TeamPlayerScalarFieldEnum = (typeof TeamPlayerScalarFieldEnum)[keyof typeof TeamPlayerScalarFieldEnum]


  export const PlayerStatScalarFieldEnum: {
    id: 'id',
    player_id: 'player_id',
    game_id: 'game_id',
    season: 'season',
    week: 'week',
    stats_data: 'stats_data',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PlayerStatScalarFieldEnum = (typeof PlayerStatScalarFieldEnum)[keyof typeof PlayerStatScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    yahoo_guid?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    nickname?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    games?: UserGameListRelationFilter
    teams?: TeamListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    yahoo_guid?: SortOrder
    name?: SortOrderInput | SortOrder
    nickname?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    games?: UserGameOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    yahoo_guid?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    nickname?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    games?: UserGameListRelationFilter
    teams?: TeamListRelationFilter
  }, "id" | "yahoo_guid">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    yahoo_guid?: SortOrder
    name?: SortOrderInput | SortOrder
    nickname?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    yahoo_guid?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    nickname?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    game_key?: StringFilter<"Game"> | string
    game_id?: StringFilter<"Game"> | string
    name?: StringNullableFilter<"Game"> | string | null
    code?: StringNullableFilter<"Game"> | string | null
    type?: StringNullableFilter<"Game"> | string | null
    url?: StringNullableFilter<"Game"> | string | null
    season?: StringNullableFilter<"Game"> | string | null
    created_at?: DateTimeFilter<"Game"> | Date | string
    updated_at?: DateTimeFilter<"Game"> | Date | string
    leagues?: LeagueListRelationFilter
    users?: UserGameListRelationFilter
    playerStats?: PlayerStatListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    game_key?: SortOrder
    game_id?: SortOrder
    name?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    season?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    leagues?: LeagueOrderByRelationAggregateInput
    users?: UserGameOrderByRelationAggregateInput
    playerStats?: PlayerStatOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    game_key?: string
    game_id?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    name?: StringNullableFilter<"Game"> | string | null
    code?: StringNullableFilter<"Game"> | string | null
    type?: StringNullableFilter<"Game"> | string | null
    url?: StringNullableFilter<"Game"> | string | null
    season?: StringNullableFilter<"Game"> | string | null
    created_at?: DateTimeFilter<"Game"> | Date | string
    updated_at?: DateTimeFilter<"Game"> | Date | string
    leagues?: LeagueListRelationFilter
    users?: UserGameListRelationFilter
    playerStats?: PlayerStatListRelationFilter
  }, "id" | "game_key" | "game_id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    game_key?: SortOrder
    game_id?: SortOrder
    name?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    season?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    game_key?: StringWithAggregatesFilter<"Game"> | string
    game_id?: StringWithAggregatesFilter<"Game"> | string
    name?: StringNullableWithAggregatesFilter<"Game"> | string | null
    code?: StringNullableWithAggregatesFilter<"Game"> | string | null
    type?: StringNullableWithAggregatesFilter<"Game"> | string | null
    url?: StringNullableWithAggregatesFilter<"Game"> | string | null
    season?: StringNullableWithAggregatesFilter<"Game"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type UserGameWhereInput = {
    AND?: UserGameWhereInput | UserGameWhereInput[]
    OR?: UserGameWhereInput[]
    NOT?: UserGameWhereInput | UserGameWhereInput[]
    id?: IntFilter<"UserGame"> | number
    user_id?: IntFilter<"UserGame"> | number
    game_id?: IntFilter<"UserGame"> | number
    created_at?: DateTimeFilter<"UserGame"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
  }

  export type UserGameOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
  }

  export type UserGameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserGameWhereInput | UserGameWhereInput[]
    OR?: UserGameWhereInput[]
    NOT?: UserGameWhereInput | UserGameWhereInput[]
    user_id?: IntFilter<"UserGame"> | number
    game_id?: IntFilter<"UserGame"> | number
    created_at?: DateTimeFilter<"UserGame"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
  }, "id">

  export type UserGameOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    _count?: UserGameCountOrderByAggregateInput
    _avg?: UserGameAvgOrderByAggregateInput
    _max?: UserGameMaxOrderByAggregateInput
    _min?: UserGameMinOrderByAggregateInput
    _sum?: UserGameSumOrderByAggregateInput
  }

  export type UserGameScalarWhereWithAggregatesInput = {
    AND?: UserGameScalarWhereWithAggregatesInput | UserGameScalarWhereWithAggregatesInput[]
    OR?: UserGameScalarWhereWithAggregatesInput[]
    NOT?: UserGameScalarWhereWithAggregatesInput | UserGameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserGame"> | number
    user_id?: IntWithAggregatesFilter<"UserGame"> | number
    game_id?: IntWithAggregatesFilter<"UserGame"> | number
    created_at?: DateTimeWithAggregatesFilter<"UserGame"> | Date | string
  }

  export type LeagueWhereInput = {
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    id?: IntFilter<"League"> | number
    league_key?: StringFilter<"League"> | string
    league_id?: StringNullableFilter<"League"> | string | null
    name?: StringNullableFilter<"League"> | string | null
    url?: StringNullableFilter<"League"> | string | null
    draft_status?: StringNullableFilter<"League"> | string | null
    num_teams?: IntNullableFilter<"League"> | number | null
    scoring_type?: StringNullableFilter<"League"> | string | null
    current_week?: IntNullableFilter<"League"> | number | null
    start_week?: IntNullableFilter<"League"> | number | null
    end_week?: IntNullableFilter<"League"> | number | null
    start_date?: DateTimeNullableFilter<"League"> | Date | string | null
    end_date?: DateTimeNullableFilter<"League"> | Date | string | null
    game_id?: IntFilter<"League"> | number
    created_at?: DateTimeFilter<"League"> | Date | string
    updated_at?: DateTimeFilter<"League"> | Date | string
    game?: XOR<GameRelationFilter, GameWhereInput>
    teams?: TeamListRelationFilter
    settings?: XOR<LeagueSettingNullableRelationFilter, LeagueSettingWhereInput> | null
  }

  export type LeagueOrderByWithRelationInput = {
    id?: SortOrder
    league_key?: SortOrder
    league_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    draft_status?: SortOrderInput | SortOrder
    num_teams?: SortOrderInput | SortOrder
    scoring_type?: SortOrderInput | SortOrder
    current_week?: SortOrderInput | SortOrder
    start_week?: SortOrderInput | SortOrder
    end_week?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    game?: GameOrderByWithRelationInput
    teams?: TeamOrderByRelationAggregateInput
    settings?: LeagueSettingOrderByWithRelationInput
  }

  export type LeagueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    league_key?: string
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    league_id?: StringNullableFilter<"League"> | string | null
    name?: StringNullableFilter<"League"> | string | null
    url?: StringNullableFilter<"League"> | string | null
    draft_status?: StringNullableFilter<"League"> | string | null
    num_teams?: IntNullableFilter<"League"> | number | null
    scoring_type?: StringNullableFilter<"League"> | string | null
    current_week?: IntNullableFilter<"League"> | number | null
    start_week?: IntNullableFilter<"League"> | number | null
    end_week?: IntNullableFilter<"League"> | number | null
    start_date?: DateTimeNullableFilter<"League"> | Date | string | null
    end_date?: DateTimeNullableFilter<"League"> | Date | string | null
    game_id?: IntFilter<"League"> | number
    created_at?: DateTimeFilter<"League"> | Date | string
    updated_at?: DateTimeFilter<"League"> | Date | string
    game?: XOR<GameRelationFilter, GameWhereInput>
    teams?: TeamListRelationFilter
    settings?: XOR<LeagueSettingNullableRelationFilter, LeagueSettingWhereInput> | null
  }, "id" | "league_key">

  export type LeagueOrderByWithAggregationInput = {
    id?: SortOrder
    league_key?: SortOrder
    league_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    draft_status?: SortOrderInput | SortOrder
    num_teams?: SortOrderInput | SortOrder
    scoring_type?: SortOrderInput | SortOrder
    current_week?: SortOrderInput | SortOrder
    start_week?: SortOrderInput | SortOrder
    end_week?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LeagueCountOrderByAggregateInput
    _avg?: LeagueAvgOrderByAggregateInput
    _max?: LeagueMaxOrderByAggregateInput
    _min?: LeagueMinOrderByAggregateInput
    _sum?: LeagueSumOrderByAggregateInput
  }

  export type LeagueScalarWhereWithAggregatesInput = {
    AND?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    OR?: LeagueScalarWhereWithAggregatesInput[]
    NOT?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"League"> | number
    league_key?: StringWithAggregatesFilter<"League"> | string
    league_id?: StringNullableWithAggregatesFilter<"League"> | string | null
    name?: StringNullableWithAggregatesFilter<"League"> | string | null
    url?: StringNullableWithAggregatesFilter<"League"> | string | null
    draft_status?: StringNullableWithAggregatesFilter<"League"> | string | null
    num_teams?: IntNullableWithAggregatesFilter<"League"> | number | null
    scoring_type?: StringNullableWithAggregatesFilter<"League"> | string | null
    current_week?: IntNullableWithAggregatesFilter<"League"> | number | null
    start_week?: IntNullableWithAggregatesFilter<"League"> | number | null
    end_week?: IntNullableWithAggregatesFilter<"League"> | number | null
    start_date?: DateTimeNullableWithAggregatesFilter<"League"> | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter<"League"> | Date | string | null
    game_id?: IntWithAggregatesFilter<"League"> | number
    created_at?: DateTimeWithAggregatesFilter<"League"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"League"> | Date | string
  }

  export type LeagueSettingWhereInput = {
    AND?: LeagueSettingWhereInput | LeagueSettingWhereInput[]
    OR?: LeagueSettingWhereInput[]
    NOT?: LeagueSettingWhereInput | LeagueSettingWhereInput[]
    id?: IntFilter<"LeagueSetting"> | number
    league_id?: IntFilter<"LeagueSetting"> | number
    settings_data?: StringNullableFilter<"LeagueSetting"> | string | null
    created_at?: DateTimeFilter<"LeagueSetting"> | Date | string
    updated_at?: DateTimeFilter<"LeagueSetting"> | Date | string
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
  }

  export type LeagueSettingOrderByWithRelationInput = {
    id?: SortOrder
    league_id?: SortOrder
    settings_data?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    league?: LeagueOrderByWithRelationInput
  }

  export type LeagueSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    league_id?: number
    AND?: LeagueSettingWhereInput | LeagueSettingWhereInput[]
    OR?: LeagueSettingWhereInput[]
    NOT?: LeagueSettingWhereInput | LeagueSettingWhereInput[]
    settings_data?: StringNullableFilter<"LeagueSetting"> | string | null
    created_at?: DateTimeFilter<"LeagueSetting"> | Date | string
    updated_at?: DateTimeFilter<"LeagueSetting"> | Date | string
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
  }, "id" | "league_id">

  export type LeagueSettingOrderByWithAggregationInput = {
    id?: SortOrder
    league_id?: SortOrder
    settings_data?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LeagueSettingCountOrderByAggregateInput
    _avg?: LeagueSettingAvgOrderByAggregateInput
    _max?: LeagueSettingMaxOrderByAggregateInput
    _min?: LeagueSettingMinOrderByAggregateInput
    _sum?: LeagueSettingSumOrderByAggregateInput
  }

  export type LeagueSettingScalarWhereWithAggregatesInput = {
    AND?: LeagueSettingScalarWhereWithAggregatesInput | LeagueSettingScalarWhereWithAggregatesInput[]
    OR?: LeagueSettingScalarWhereWithAggregatesInput[]
    NOT?: LeagueSettingScalarWhereWithAggregatesInput | LeagueSettingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeagueSetting"> | number
    league_id?: IntWithAggregatesFilter<"LeagueSetting"> | number
    settings_data?: StringNullableWithAggregatesFilter<"LeagueSetting"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"LeagueSetting"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"LeagueSetting"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    team_key?: StringFilter<"Team"> | string
    team_id?: StringNullableFilter<"Team"> | string | null
    name?: StringNullableFilter<"Team"> | string | null
    is_owned_by_current_user?: BoolFilter<"Team"> | boolean
    url?: StringNullableFilter<"Team"> | string | null
    team_logo?: StringNullableFilter<"Team"> | string | null
    waiver_priority?: IntNullableFilter<"Team"> | number | null
    number_of_moves?: IntFilter<"Team"> | number
    number_of_trades?: IntFilter<"Team"> | number
    league_id?: IntFilter<"Team"> | number
    manager_user_id?: IntNullableFilter<"Team"> | number | null
    created_at?: DateTimeFilter<"Team"> | Date | string
    updated_at?: DateTimeFilter<"Team"> | Date | string
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    manager?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    roster?: TeamPlayerListRelationFilter
    standings?: XOR<TeamStandingNullableRelationFilter, TeamStandingWhereInput> | null
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    team_key?: SortOrder
    team_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    is_owned_by_current_user?: SortOrder
    url?: SortOrderInput | SortOrder
    team_logo?: SortOrderInput | SortOrder
    waiver_priority?: SortOrderInput | SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    league?: LeagueOrderByWithRelationInput
    manager?: UserOrderByWithRelationInput
    roster?: TeamPlayerOrderByRelationAggregateInput
    standings?: TeamStandingOrderByWithRelationInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    team_key?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    team_id?: StringNullableFilter<"Team"> | string | null
    name?: StringNullableFilter<"Team"> | string | null
    is_owned_by_current_user?: BoolFilter<"Team"> | boolean
    url?: StringNullableFilter<"Team"> | string | null
    team_logo?: StringNullableFilter<"Team"> | string | null
    waiver_priority?: IntNullableFilter<"Team"> | number | null
    number_of_moves?: IntFilter<"Team"> | number
    number_of_trades?: IntFilter<"Team"> | number
    league_id?: IntFilter<"Team"> | number
    manager_user_id?: IntNullableFilter<"Team"> | number | null
    created_at?: DateTimeFilter<"Team"> | Date | string
    updated_at?: DateTimeFilter<"Team"> | Date | string
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    manager?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    roster?: TeamPlayerListRelationFilter
    standings?: XOR<TeamStandingNullableRelationFilter, TeamStandingWhereInput> | null
  }, "id" | "team_key">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    team_key?: SortOrder
    team_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    is_owned_by_current_user?: SortOrder
    url?: SortOrderInput | SortOrder
    team_logo?: SortOrderInput | SortOrder
    waiver_priority?: SortOrderInput | SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    team_key?: StringWithAggregatesFilter<"Team"> | string
    team_id?: StringNullableWithAggregatesFilter<"Team"> | string | null
    name?: StringNullableWithAggregatesFilter<"Team"> | string | null
    is_owned_by_current_user?: BoolWithAggregatesFilter<"Team"> | boolean
    url?: StringNullableWithAggregatesFilter<"Team"> | string | null
    team_logo?: StringNullableWithAggregatesFilter<"Team"> | string | null
    waiver_priority?: IntNullableWithAggregatesFilter<"Team"> | number | null
    number_of_moves?: IntWithAggregatesFilter<"Team"> | number
    number_of_trades?: IntWithAggregatesFilter<"Team"> | number
    league_id?: IntWithAggregatesFilter<"Team"> | number
    manager_user_id?: IntNullableWithAggregatesFilter<"Team"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type TeamStandingWhereInput = {
    AND?: TeamStandingWhereInput | TeamStandingWhereInput[]
    OR?: TeamStandingWhereInput[]
    NOT?: TeamStandingWhereInput | TeamStandingWhereInput[]
    id?: IntFilter<"TeamStanding"> | number
    team_id?: IntFilter<"TeamStanding"> | number
    rank?: IntNullableFilter<"TeamStanding"> | number | null
    points_for?: FloatNullableFilter<"TeamStanding"> | number | null
    points_against?: FloatNullableFilter<"TeamStanding"> | number | null
    wins?: IntFilter<"TeamStanding"> | number
    losses?: IntFilter<"TeamStanding"> | number
    ties?: IntFilter<"TeamStanding"> | number
    percentage?: FloatNullableFilter<"TeamStanding"> | number | null
    streak?: StringNullableFilter<"TeamStanding"> | string | null
    created_at?: DateTimeFilter<"TeamStanding"> | Date | string
    updated_at?: DateTimeFilter<"TeamStanding"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type TeamStandingOrderByWithRelationInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrderInput | SortOrder
    points_for?: SortOrderInput | SortOrder
    points_against?: SortOrderInput | SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrderInput | SortOrder
    streak?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    team?: TeamOrderByWithRelationInput
  }

  export type TeamStandingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    team_id?: number
    AND?: TeamStandingWhereInput | TeamStandingWhereInput[]
    OR?: TeamStandingWhereInput[]
    NOT?: TeamStandingWhereInput | TeamStandingWhereInput[]
    rank?: IntNullableFilter<"TeamStanding"> | number | null
    points_for?: FloatNullableFilter<"TeamStanding"> | number | null
    points_against?: FloatNullableFilter<"TeamStanding"> | number | null
    wins?: IntFilter<"TeamStanding"> | number
    losses?: IntFilter<"TeamStanding"> | number
    ties?: IntFilter<"TeamStanding"> | number
    percentage?: FloatNullableFilter<"TeamStanding"> | number | null
    streak?: StringNullableFilter<"TeamStanding"> | string | null
    created_at?: DateTimeFilter<"TeamStanding"> | Date | string
    updated_at?: DateTimeFilter<"TeamStanding"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id" | "team_id">

  export type TeamStandingOrderByWithAggregationInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrderInput | SortOrder
    points_for?: SortOrderInput | SortOrder
    points_against?: SortOrderInput | SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrderInput | SortOrder
    streak?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TeamStandingCountOrderByAggregateInput
    _avg?: TeamStandingAvgOrderByAggregateInput
    _max?: TeamStandingMaxOrderByAggregateInput
    _min?: TeamStandingMinOrderByAggregateInput
    _sum?: TeamStandingSumOrderByAggregateInput
  }

  export type TeamStandingScalarWhereWithAggregatesInput = {
    AND?: TeamStandingScalarWhereWithAggregatesInput | TeamStandingScalarWhereWithAggregatesInput[]
    OR?: TeamStandingScalarWhereWithAggregatesInput[]
    NOT?: TeamStandingScalarWhereWithAggregatesInput | TeamStandingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamStanding"> | number
    team_id?: IntWithAggregatesFilter<"TeamStanding"> | number
    rank?: IntNullableWithAggregatesFilter<"TeamStanding"> | number | null
    points_for?: FloatNullableWithAggregatesFilter<"TeamStanding"> | number | null
    points_against?: FloatNullableWithAggregatesFilter<"TeamStanding"> | number | null
    wins?: IntWithAggregatesFilter<"TeamStanding"> | number
    losses?: IntWithAggregatesFilter<"TeamStanding"> | number
    ties?: IntWithAggregatesFilter<"TeamStanding"> | number
    percentage?: FloatNullableWithAggregatesFilter<"TeamStanding"> | number | null
    streak?: StringNullableWithAggregatesFilter<"TeamStanding"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"TeamStanding"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"TeamStanding"> | Date | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    player_key?: StringFilter<"Player"> | string
    player_id?: StringNullableFilter<"Player"> | string | null
    name?: StringNullableFilter<"Player"> | string | null
    first_name?: StringNullableFilter<"Player"> | string | null
    last_name?: StringNullableFilter<"Player"> | string | null
    editorial_player_key?: StringNullableFilter<"Player"> | string | null
    editorial_team_key?: StringNullableFilter<"Player"> | string | null
    editorial_team_full_name?: StringNullableFilter<"Player"> | string | null
    editorial_team_abbr?: StringNullableFilter<"Player"> | string | null
    uniform_number?: StringNullableFilter<"Player"> | string | null
    display_position?: StringNullableFilter<"Player"> | string | null
    headshot_url?: StringNullableFilter<"Player"> | string | null
    is_undroppable?: BoolFilter<"Player"> | boolean
    position_type?: StringNullableFilter<"Player"> | string | null
    eligible_positions?: StringNullableFilter<"Player"> | string | null
    created_at?: DateTimeFilter<"Player"> | Date | string
    updated_at?: DateTimeFilter<"Player"> | Date | string
    teams?: TeamPlayerListRelationFilter
    stats?: PlayerStatListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    player_key?: SortOrder
    player_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    editorial_player_key?: SortOrderInput | SortOrder
    editorial_team_key?: SortOrderInput | SortOrder
    editorial_team_full_name?: SortOrderInput | SortOrder
    editorial_team_abbr?: SortOrderInput | SortOrder
    uniform_number?: SortOrderInput | SortOrder
    display_position?: SortOrderInput | SortOrder
    headshot_url?: SortOrderInput | SortOrder
    is_undroppable?: SortOrder
    position_type?: SortOrderInput | SortOrder
    eligible_positions?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    teams?: TeamPlayerOrderByRelationAggregateInput
    stats?: PlayerStatOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    player_key?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    player_id?: StringNullableFilter<"Player"> | string | null
    name?: StringNullableFilter<"Player"> | string | null
    first_name?: StringNullableFilter<"Player"> | string | null
    last_name?: StringNullableFilter<"Player"> | string | null
    editorial_player_key?: StringNullableFilter<"Player"> | string | null
    editorial_team_key?: StringNullableFilter<"Player"> | string | null
    editorial_team_full_name?: StringNullableFilter<"Player"> | string | null
    editorial_team_abbr?: StringNullableFilter<"Player"> | string | null
    uniform_number?: StringNullableFilter<"Player"> | string | null
    display_position?: StringNullableFilter<"Player"> | string | null
    headshot_url?: StringNullableFilter<"Player"> | string | null
    is_undroppable?: BoolFilter<"Player"> | boolean
    position_type?: StringNullableFilter<"Player"> | string | null
    eligible_positions?: StringNullableFilter<"Player"> | string | null
    created_at?: DateTimeFilter<"Player"> | Date | string
    updated_at?: DateTimeFilter<"Player"> | Date | string
    teams?: TeamPlayerListRelationFilter
    stats?: PlayerStatListRelationFilter
  }, "id" | "player_key">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    player_key?: SortOrder
    player_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    editorial_player_key?: SortOrderInput | SortOrder
    editorial_team_key?: SortOrderInput | SortOrder
    editorial_team_full_name?: SortOrderInput | SortOrder
    editorial_team_abbr?: SortOrderInput | SortOrder
    uniform_number?: SortOrderInput | SortOrder
    display_position?: SortOrderInput | SortOrder
    headshot_url?: SortOrderInput | SortOrder
    is_undroppable?: SortOrder
    position_type?: SortOrderInput | SortOrder
    eligible_positions?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    player_key?: StringWithAggregatesFilter<"Player"> | string
    player_id?: StringNullableWithAggregatesFilter<"Player"> | string | null
    name?: StringNullableWithAggregatesFilter<"Player"> | string | null
    first_name?: StringNullableWithAggregatesFilter<"Player"> | string | null
    last_name?: StringNullableWithAggregatesFilter<"Player"> | string | null
    editorial_player_key?: StringNullableWithAggregatesFilter<"Player"> | string | null
    editorial_team_key?: StringNullableWithAggregatesFilter<"Player"> | string | null
    editorial_team_full_name?: StringNullableWithAggregatesFilter<"Player"> | string | null
    editorial_team_abbr?: StringNullableWithAggregatesFilter<"Player"> | string | null
    uniform_number?: StringNullableWithAggregatesFilter<"Player"> | string | null
    display_position?: StringNullableWithAggregatesFilter<"Player"> | string | null
    headshot_url?: StringNullableWithAggregatesFilter<"Player"> | string | null
    is_undroppable?: BoolWithAggregatesFilter<"Player"> | boolean
    position_type?: StringNullableWithAggregatesFilter<"Player"> | string | null
    eligible_positions?: StringNullableWithAggregatesFilter<"Player"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Player"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Player"> | Date | string
  }

  export type TeamPlayerWhereInput = {
    AND?: TeamPlayerWhereInput | TeamPlayerWhereInput[]
    OR?: TeamPlayerWhereInput[]
    NOT?: TeamPlayerWhereInput | TeamPlayerWhereInput[]
    id?: IntFilter<"TeamPlayer"> | number
    team_id?: IntFilter<"TeamPlayer"> | number
    player_id?: IntFilter<"TeamPlayer"> | number
    position?: StringNullableFilter<"TeamPlayer"> | string | null
    selected_position?: StringNullableFilter<"TeamPlayer"> | string | null
    is_starting?: BoolFilter<"TeamPlayer"> | boolean
    created_at?: DateTimeFilter<"TeamPlayer"> | Date | string
    updated_at?: DateTimeFilter<"TeamPlayer"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type TeamPlayerOrderByWithRelationInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
    position?: SortOrderInput | SortOrder
    selected_position?: SortOrderInput | SortOrder
    is_starting?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    team?: TeamOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
  }

  export type TeamPlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamPlayerWhereInput | TeamPlayerWhereInput[]
    OR?: TeamPlayerWhereInput[]
    NOT?: TeamPlayerWhereInput | TeamPlayerWhereInput[]
    team_id?: IntFilter<"TeamPlayer"> | number
    player_id?: IntFilter<"TeamPlayer"> | number
    position?: StringNullableFilter<"TeamPlayer"> | string | null
    selected_position?: StringNullableFilter<"TeamPlayer"> | string | null
    is_starting?: BoolFilter<"TeamPlayer"> | boolean
    created_at?: DateTimeFilter<"TeamPlayer"> | Date | string
    updated_at?: DateTimeFilter<"TeamPlayer"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id">

  export type TeamPlayerOrderByWithAggregationInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
    position?: SortOrderInput | SortOrder
    selected_position?: SortOrderInput | SortOrder
    is_starting?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TeamPlayerCountOrderByAggregateInput
    _avg?: TeamPlayerAvgOrderByAggregateInput
    _max?: TeamPlayerMaxOrderByAggregateInput
    _min?: TeamPlayerMinOrderByAggregateInput
    _sum?: TeamPlayerSumOrderByAggregateInput
  }

  export type TeamPlayerScalarWhereWithAggregatesInput = {
    AND?: TeamPlayerScalarWhereWithAggregatesInput | TeamPlayerScalarWhereWithAggregatesInput[]
    OR?: TeamPlayerScalarWhereWithAggregatesInput[]
    NOT?: TeamPlayerScalarWhereWithAggregatesInput | TeamPlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamPlayer"> | number
    team_id?: IntWithAggregatesFilter<"TeamPlayer"> | number
    player_id?: IntWithAggregatesFilter<"TeamPlayer"> | number
    position?: StringNullableWithAggregatesFilter<"TeamPlayer"> | string | null
    selected_position?: StringNullableWithAggregatesFilter<"TeamPlayer"> | string | null
    is_starting?: BoolWithAggregatesFilter<"TeamPlayer"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"TeamPlayer"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"TeamPlayer"> | Date | string
  }

  export type PlayerStatWhereInput = {
    AND?: PlayerStatWhereInput | PlayerStatWhereInput[]
    OR?: PlayerStatWhereInput[]
    NOT?: PlayerStatWhereInput | PlayerStatWhereInput[]
    id?: IntFilter<"PlayerStat"> | number
    player_id?: IntFilter<"PlayerStat"> | number
    game_id?: IntFilter<"PlayerStat"> | number
    season?: StringNullableFilter<"PlayerStat"> | string | null
    week?: IntNullableFilter<"PlayerStat"> | number | null
    stats_data?: StringNullableFilter<"PlayerStat"> | string | null
    created_at?: DateTimeFilter<"PlayerStat"> | Date | string
    updated_at?: DateTimeFilter<"PlayerStat"> | Date | string
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
  }

  export type PlayerStatOrderByWithRelationInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    season?: SortOrderInput | SortOrder
    week?: SortOrderInput | SortOrder
    stats_data?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    player?: PlayerOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
  }

  export type PlayerStatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerStatWhereInput | PlayerStatWhereInput[]
    OR?: PlayerStatWhereInput[]
    NOT?: PlayerStatWhereInput | PlayerStatWhereInput[]
    player_id?: IntFilter<"PlayerStat"> | number
    game_id?: IntFilter<"PlayerStat"> | number
    season?: StringNullableFilter<"PlayerStat"> | string | null
    week?: IntNullableFilter<"PlayerStat"> | number | null
    stats_data?: StringNullableFilter<"PlayerStat"> | string | null
    created_at?: DateTimeFilter<"PlayerStat"> | Date | string
    updated_at?: DateTimeFilter<"PlayerStat"> | Date | string
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
  }, "id">

  export type PlayerStatOrderByWithAggregationInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    season?: SortOrderInput | SortOrder
    week?: SortOrderInput | SortOrder
    stats_data?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PlayerStatCountOrderByAggregateInput
    _avg?: PlayerStatAvgOrderByAggregateInput
    _max?: PlayerStatMaxOrderByAggregateInput
    _min?: PlayerStatMinOrderByAggregateInput
    _sum?: PlayerStatSumOrderByAggregateInput
  }

  export type PlayerStatScalarWhereWithAggregatesInput = {
    AND?: PlayerStatScalarWhereWithAggregatesInput | PlayerStatScalarWhereWithAggregatesInput[]
    OR?: PlayerStatScalarWhereWithAggregatesInput[]
    NOT?: PlayerStatScalarWhereWithAggregatesInput | PlayerStatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlayerStat"> | number
    player_id?: IntWithAggregatesFilter<"PlayerStat"> | number
    game_id?: IntWithAggregatesFilter<"PlayerStat"> | number
    season?: StringNullableWithAggregatesFilter<"PlayerStat"> | string | null
    week?: IntNullableWithAggregatesFilter<"PlayerStat"> | number | null
    stats_data?: StringNullableWithAggregatesFilter<"PlayerStat"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"PlayerStat"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PlayerStat"> | Date | string
  }

  export type UserCreateInput = {
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    games?: UserGameCreateNestedManyWithoutUserInput
    teams?: TeamCreateNestedManyWithoutManagerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    games?: UserGameUncheckedCreateNestedManyWithoutUserInput
    teams?: TeamUncheckedCreateNestedManyWithoutManagerInput
  }

  export type UserUpdateInput = {
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: UserGameUpdateManyWithoutUserNestedInput
    teams?: TeamUpdateManyWithoutManagerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: UserGameUncheckedUpdateManyWithoutUserNestedInput
    teams?: TeamUncheckedUpdateManyWithoutManagerNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    leagues?: LeagueCreateNestedManyWithoutGameInput
    users?: UserGameCreateNestedManyWithoutGameInput
    playerStats?: PlayerStatCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutGameInput
    users?: UserGameUncheckedCreateNestedManyWithoutGameInput
    playerStats?: PlayerStatUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutGameNestedInput
    users?: UserGameUpdateManyWithoutGameNestedInput
    playerStats?: PlayerStatUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutGameNestedInput
    users?: UserGameUncheckedUpdateManyWithoutGameNestedInput
    playerStats?: PlayerStatUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGameCreateInput = {
    created_at?: Date | string
    user: UserCreateNestedOneWithoutGamesInput
    game: GameCreateNestedOneWithoutUsersInput
  }

  export type UserGameUncheckedCreateInput = {
    id?: number
    user_id: number
    game_id: number
    created_at?: Date | string
  }

  export type UserGameUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGamesNestedInput
    game?: GameUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserGameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGameCreateManyInput = {
    id?: number
    user_id: number
    game_id: number
    created_at?: Date | string
  }

  export type UserGameUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateInput = {
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    game: GameCreateNestedOneWithoutLeaguesInput
    teams?: TeamCreateNestedManyWithoutLeagueInput
    settings?: LeagueSettingCreateNestedOneWithoutLeagueInput
  }

  export type LeagueUncheckedCreateInput = {
    id?: number
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutLeagueInput
    settings?: LeagueSettingUncheckedCreateNestedOneWithoutLeagueInput
  }

  export type LeagueUpdateInput = {
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutLeaguesNestedInput
    teams?: TeamUpdateManyWithoutLeagueNestedInput
    settings?: LeagueSettingUpdateOneWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutLeagueNestedInput
    settings?: LeagueSettingUncheckedUpdateOneWithoutLeagueNestedInput
  }

  export type LeagueCreateManyInput = {
    id?: number
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeagueUpdateManyMutationInput = {
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueSettingCreateInput = {
    settings_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    league: LeagueCreateNestedOneWithoutSettingsInput
  }

  export type LeagueSettingUncheckedCreateInput = {
    id?: number
    league_id: number
    settings_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeagueSettingUpdateInput = {
    settings_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type LeagueSettingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    settings_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueSettingCreateManyInput = {
    id?: number
    league_id: number
    settings_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeagueSettingUpdateManyMutationInput = {
    settings_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueSettingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    settings_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    created_at?: Date | string
    updated_at?: Date | string
    league: LeagueCreateNestedOneWithoutTeamsInput
    manager?: UserCreateNestedOneWithoutTeamsInput
    roster?: TeamPlayerCreateNestedManyWithoutTeamInput
    standings?: TeamStandingCreateNestedOneWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    league_id: number
    manager_user_id?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    roster?: TeamPlayerUncheckedCreateNestedManyWithoutTeamInput
    standings?: TeamStandingUncheckedCreateNestedOneWithoutTeamInput
  }

  export type TeamUpdateInput = {
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutTeamsNestedInput
    manager?: UserUpdateOneWithoutTeamsNestedInput
    roster?: TeamPlayerUpdateManyWithoutTeamNestedInput
    standings?: TeamStandingUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    manager_user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    roster?: TeamPlayerUncheckedUpdateManyWithoutTeamNestedInput
    standings?: TeamStandingUncheckedUpdateOneWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    league_id: number
    manager_user_id?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    manager_user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStandingCreateInput = {
    rank?: number | null
    points_for?: number | null
    points_against?: number | null
    wins?: number
    losses?: number
    ties?: number
    percentage?: number | null
    streak?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    team: TeamCreateNestedOneWithoutStandingsInput
  }

  export type TeamStandingUncheckedCreateInput = {
    id?: number
    team_id: number
    rank?: number | null
    points_for?: number | null
    points_against?: number | null
    wins?: number
    losses?: number
    ties?: number
    percentage?: number | null
    streak?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamStandingUpdateInput = {
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    points_for?: NullableFloatFieldUpdateOperationsInput | number | null
    points_against?: NullableFloatFieldUpdateOperationsInput | number | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutStandingsNestedInput
  }

  export type TeamStandingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    points_for?: NullableFloatFieldUpdateOperationsInput | number | null
    points_against?: NullableFloatFieldUpdateOperationsInput | number | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStandingCreateManyInput = {
    id?: number
    team_id: number
    rank?: number | null
    points_for?: number | null
    points_against?: number | null
    wins?: number
    losses?: number
    ties?: number
    percentage?: number | null
    streak?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamStandingUpdateManyMutationInput = {
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    points_for?: NullableFloatFieldUpdateOperationsInput | number | null
    points_against?: NullableFloatFieldUpdateOperationsInput | number | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStandingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    points_for?: NullableFloatFieldUpdateOperationsInput | number | null
    points_against?: NullableFloatFieldUpdateOperationsInput | number | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCreateInput = {
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamPlayerCreateNestedManyWithoutPlayerInput
    stats?: PlayerStatCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamPlayerUncheckedCreateNestedManyWithoutPlayerInput
    stats?: PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamPlayerUpdateManyWithoutPlayerNestedInput
    stats?: PlayerStatUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamPlayerUncheckedUpdateManyWithoutPlayerNestedInput
    stats?: PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PlayerUpdateManyMutationInput = {
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerCreateInput = {
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    team: TeamCreateNestedOneWithoutRosterInput
    player: PlayerCreateNestedOneWithoutTeamsInput
  }

  export type TeamPlayerUncheckedCreateInput = {
    id?: number
    team_id: number
    player_id: number
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamPlayerUpdateInput = {
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutRosterNestedInput
    player?: PlayerUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type TeamPlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerCreateManyInput = {
    id?: number
    team_id: number
    player_id: number
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamPlayerUpdateManyMutationInput = {
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatCreateInput = {
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    player: PlayerCreateNestedOneWithoutStatsInput
    game: GameCreateNestedOneWithoutPlayerStatsInput
  }

  export type PlayerStatUncheckedCreateInput = {
    id?: number
    player_id: number
    game_id: number
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PlayerStatUpdateInput = {
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutStatsNestedInput
    game?: GameUpdateOneRequiredWithoutPlayerStatsNestedInput
  }

  export type PlayerStatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatCreateManyInput = {
    id?: number
    player_id: number
    game_id: number
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PlayerStatUpdateManyMutationInput = {
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserGameListRelationFilter = {
    every?: UserGameWhereInput
    some?: UserGameWhereInput
    none?: UserGameWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserGameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    yahoo_guid?: SortOrder
    name?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    yahoo_guid?: SortOrder
    name?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    yahoo_guid?: SortOrder
    name?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LeagueListRelationFilter = {
    every?: LeagueWhereInput
    some?: LeagueWhereInput
    none?: LeagueWhereInput
  }

  export type PlayerStatListRelationFilter = {
    every?: PlayerStatWhereInput
    some?: PlayerStatWhereInput
    none?: PlayerStatWhereInput
  }

  export type LeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerStatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    game_key?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    type?: SortOrder
    url?: SortOrder
    season?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    game_key?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    type?: SortOrder
    url?: SortOrder
    season?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    game_key?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    type?: SortOrder
    url?: SortOrder
    season?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type UserGameCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
  }

  export type UserGameAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type UserGameMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
  }

  export type UserGameMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
  }

  export type UserGameSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LeagueSettingNullableRelationFilter = {
    is?: LeagueSettingWhereInput | null
    isNot?: LeagueSettingWhereInput | null
  }

  export type LeagueCountOrderByAggregateInput = {
    id?: SortOrder
    league_key?: SortOrder
    league_id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    draft_status?: SortOrder
    num_teams?: SortOrder
    scoring_type?: SortOrder
    current_week?: SortOrder
    start_week?: SortOrder
    end_week?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeagueAvgOrderByAggregateInput = {
    id?: SortOrder
    num_teams?: SortOrder
    current_week?: SortOrder
    start_week?: SortOrder
    end_week?: SortOrder
    game_id?: SortOrder
  }

  export type LeagueMaxOrderByAggregateInput = {
    id?: SortOrder
    league_key?: SortOrder
    league_id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    draft_status?: SortOrder
    num_teams?: SortOrder
    scoring_type?: SortOrder
    current_week?: SortOrder
    start_week?: SortOrder
    end_week?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeagueMinOrderByAggregateInput = {
    id?: SortOrder
    league_key?: SortOrder
    league_id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    draft_status?: SortOrder
    num_teams?: SortOrder
    scoring_type?: SortOrder
    current_week?: SortOrder
    start_week?: SortOrder
    end_week?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeagueSumOrderByAggregateInput = {
    id?: SortOrder
    num_teams?: SortOrder
    current_week?: SortOrder
    start_week?: SortOrder
    end_week?: SortOrder
    game_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type LeagueRelationFilter = {
    is?: LeagueWhereInput
    isNot?: LeagueWhereInput
  }

  export type LeagueSettingCountOrderByAggregateInput = {
    id?: SortOrder
    league_id?: SortOrder
    settings_data?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeagueSettingAvgOrderByAggregateInput = {
    id?: SortOrder
    league_id?: SortOrder
  }

  export type LeagueSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    league_id?: SortOrder
    settings_data?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeagueSettingMinOrderByAggregateInput = {
    id?: SortOrder
    league_id?: SortOrder
    settings_data?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeagueSettingSumOrderByAggregateInput = {
    id?: SortOrder
    league_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TeamPlayerListRelationFilter = {
    every?: TeamPlayerWhereInput
    some?: TeamPlayerWhereInput
    none?: TeamPlayerWhereInput
  }

  export type TeamStandingNullableRelationFilter = {
    is?: TeamStandingWhereInput | null
    isNot?: TeamStandingWhereInput | null
  }

  export type TeamPlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    team_key?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    is_owned_by_current_user?: SortOrder
    url?: SortOrder
    team_logo?: SortOrder
    waiver_priority?: SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
    waiver_priority?: SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    team_key?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    is_owned_by_current_user?: SortOrder
    url?: SortOrder
    team_logo?: SortOrder
    waiver_priority?: SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    team_key?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    is_owned_by_current_user?: SortOrder
    url?: SortOrder
    team_logo?: SortOrder
    waiver_priority?: SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
    waiver_priority?: SortOrder
    number_of_moves?: SortOrder
    number_of_trades?: SortOrder
    league_id?: SortOrder
    manager_user_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamStandingCountOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrder
    points_for?: SortOrder
    points_against?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrder
    streak?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamStandingAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrder
    points_for?: SortOrder
    points_against?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrder
  }

  export type TeamStandingMaxOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrder
    points_for?: SortOrder
    points_against?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrder
    streak?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamStandingMinOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrder
    points_for?: SortOrder
    points_against?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrder
    streak?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamStandingSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    rank?: SortOrder
    points_for?: SortOrder
    points_against?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    percentage?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    player_key?: SortOrder
    player_id?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    editorial_player_key?: SortOrder
    editorial_team_key?: SortOrder
    editorial_team_full_name?: SortOrder
    editorial_team_abbr?: SortOrder
    uniform_number?: SortOrder
    display_position?: SortOrder
    headshot_url?: SortOrder
    is_undroppable?: SortOrder
    position_type?: SortOrder
    eligible_positions?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    player_key?: SortOrder
    player_id?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    editorial_player_key?: SortOrder
    editorial_team_key?: SortOrder
    editorial_team_full_name?: SortOrder
    editorial_team_abbr?: SortOrder
    uniform_number?: SortOrder
    display_position?: SortOrder
    headshot_url?: SortOrder
    is_undroppable?: SortOrder
    position_type?: SortOrder
    eligible_positions?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    player_key?: SortOrder
    player_id?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    editorial_player_key?: SortOrder
    editorial_team_key?: SortOrder
    editorial_team_full_name?: SortOrder
    editorial_team_abbr?: SortOrder
    uniform_number?: SortOrder
    display_position?: SortOrder
    headshot_url?: SortOrder
    is_undroppable?: SortOrder
    position_type?: SortOrder
    eligible_positions?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type TeamPlayerCountOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
    position?: SortOrder
    selected_position?: SortOrder
    is_starting?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamPlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
  }

  export type TeamPlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
    position?: SortOrder
    selected_position?: SortOrder
    is_starting?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamPlayerMinOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
    position?: SortOrder
    selected_position?: SortOrder
    is_starting?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamPlayerSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    player_id?: SortOrder
  }

  export type PlayerStatCountOrderByAggregateInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    season?: SortOrder
    week?: SortOrder
    stats_data?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlayerStatAvgOrderByAggregateInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    week?: SortOrder
  }

  export type PlayerStatMaxOrderByAggregateInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    season?: SortOrder
    week?: SortOrder
    stats_data?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlayerStatMinOrderByAggregateInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    season?: SortOrder
    week?: SortOrder
    stats_data?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlayerStatSumOrderByAggregateInput = {
    id?: SortOrder
    player_id?: SortOrder
    game_id?: SortOrder
    week?: SortOrder
  }

  export type UserGameCreateNestedManyWithoutUserInput = {
    create?: XOR<UserGameCreateWithoutUserInput, UserGameUncheckedCreateWithoutUserInput> | UserGameCreateWithoutUserInput[] | UserGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutUserInput | UserGameCreateOrConnectWithoutUserInput[]
    createMany?: UserGameCreateManyUserInputEnvelope
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutManagerInput = {
    create?: XOR<TeamCreateWithoutManagerInput, TeamUncheckedCreateWithoutManagerInput> | TeamCreateWithoutManagerInput[] | TeamUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutManagerInput | TeamCreateOrConnectWithoutManagerInput[]
    createMany?: TeamCreateManyManagerInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type UserGameUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserGameCreateWithoutUserInput, UserGameUncheckedCreateWithoutUserInput> | UserGameCreateWithoutUserInput[] | UserGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutUserInput | UserGameCreateOrConnectWithoutUserInput[]
    createMany?: UserGameCreateManyUserInputEnvelope
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutManagerInput = {
    create?: XOR<TeamCreateWithoutManagerInput, TeamUncheckedCreateWithoutManagerInput> | TeamCreateWithoutManagerInput[] | TeamUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutManagerInput | TeamCreateOrConnectWithoutManagerInput[]
    createMany?: TeamCreateManyManagerInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserGameUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserGameCreateWithoutUserInput, UserGameUncheckedCreateWithoutUserInput> | UserGameCreateWithoutUserInput[] | UserGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutUserInput | UserGameCreateOrConnectWithoutUserInput[]
    upsert?: UserGameUpsertWithWhereUniqueWithoutUserInput | UserGameUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserGameCreateManyUserInputEnvelope
    set?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    disconnect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    delete?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    update?: UserGameUpdateWithWhereUniqueWithoutUserInput | UserGameUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserGameUpdateManyWithWhereWithoutUserInput | UserGameUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserGameScalarWhereInput | UserGameScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutManagerNestedInput = {
    create?: XOR<TeamCreateWithoutManagerInput, TeamUncheckedCreateWithoutManagerInput> | TeamCreateWithoutManagerInput[] | TeamUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutManagerInput | TeamCreateOrConnectWithoutManagerInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutManagerInput | TeamUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: TeamCreateManyManagerInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutManagerInput | TeamUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutManagerInput | TeamUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserGameUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserGameCreateWithoutUserInput, UserGameUncheckedCreateWithoutUserInput> | UserGameCreateWithoutUserInput[] | UserGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutUserInput | UserGameCreateOrConnectWithoutUserInput[]
    upsert?: UserGameUpsertWithWhereUniqueWithoutUserInput | UserGameUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserGameCreateManyUserInputEnvelope
    set?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    disconnect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    delete?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    update?: UserGameUpdateWithWhereUniqueWithoutUserInput | UserGameUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserGameUpdateManyWithWhereWithoutUserInput | UserGameUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserGameScalarWhereInput | UserGameScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutManagerNestedInput = {
    create?: XOR<TeamCreateWithoutManagerInput, TeamUncheckedCreateWithoutManagerInput> | TeamCreateWithoutManagerInput[] | TeamUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutManagerInput | TeamCreateOrConnectWithoutManagerInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutManagerInput | TeamUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: TeamCreateManyManagerInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutManagerInput | TeamUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutManagerInput | TeamUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type LeagueCreateNestedManyWithoutGameInput = {
    create?: XOR<LeagueCreateWithoutGameInput, LeagueUncheckedCreateWithoutGameInput> | LeagueCreateWithoutGameInput[] | LeagueUncheckedCreateWithoutGameInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutGameInput | LeagueCreateOrConnectWithoutGameInput[]
    createMany?: LeagueCreateManyGameInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type UserGameCreateNestedManyWithoutGameInput = {
    create?: XOR<UserGameCreateWithoutGameInput, UserGameUncheckedCreateWithoutGameInput> | UserGameCreateWithoutGameInput[] | UserGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutGameInput | UserGameCreateOrConnectWithoutGameInput[]
    createMany?: UserGameCreateManyGameInputEnvelope
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
  }

  export type PlayerStatCreateNestedManyWithoutGameInput = {
    create?: XOR<PlayerStatCreateWithoutGameInput, PlayerStatUncheckedCreateWithoutGameInput> | PlayerStatCreateWithoutGameInput[] | PlayerStatUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutGameInput | PlayerStatCreateOrConnectWithoutGameInput[]
    createMany?: PlayerStatCreateManyGameInputEnvelope
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<LeagueCreateWithoutGameInput, LeagueUncheckedCreateWithoutGameInput> | LeagueCreateWithoutGameInput[] | LeagueUncheckedCreateWithoutGameInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutGameInput | LeagueCreateOrConnectWithoutGameInput[]
    createMany?: LeagueCreateManyGameInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type UserGameUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<UserGameCreateWithoutGameInput, UserGameUncheckedCreateWithoutGameInput> | UserGameCreateWithoutGameInput[] | UserGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutGameInput | UserGameCreateOrConnectWithoutGameInput[]
    createMany?: UserGameCreateManyGameInputEnvelope
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
  }

  export type PlayerStatUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<PlayerStatCreateWithoutGameInput, PlayerStatUncheckedCreateWithoutGameInput> | PlayerStatCreateWithoutGameInput[] | PlayerStatUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutGameInput | PlayerStatCreateOrConnectWithoutGameInput[]
    createMany?: PlayerStatCreateManyGameInputEnvelope
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
  }

  export type LeagueUpdateManyWithoutGameNestedInput = {
    create?: XOR<LeagueCreateWithoutGameInput, LeagueUncheckedCreateWithoutGameInput> | LeagueCreateWithoutGameInput[] | LeagueUncheckedCreateWithoutGameInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutGameInput | LeagueCreateOrConnectWithoutGameInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutGameInput | LeagueUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: LeagueCreateManyGameInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutGameInput | LeagueUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutGameInput | LeagueUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type UserGameUpdateManyWithoutGameNestedInput = {
    create?: XOR<UserGameCreateWithoutGameInput, UserGameUncheckedCreateWithoutGameInput> | UserGameCreateWithoutGameInput[] | UserGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutGameInput | UserGameCreateOrConnectWithoutGameInput[]
    upsert?: UserGameUpsertWithWhereUniqueWithoutGameInput | UserGameUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: UserGameCreateManyGameInputEnvelope
    set?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    disconnect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    delete?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    update?: UserGameUpdateWithWhereUniqueWithoutGameInput | UserGameUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: UserGameUpdateManyWithWhereWithoutGameInput | UserGameUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: UserGameScalarWhereInput | UserGameScalarWhereInput[]
  }

  export type PlayerStatUpdateManyWithoutGameNestedInput = {
    create?: XOR<PlayerStatCreateWithoutGameInput, PlayerStatUncheckedCreateWithoutGameInput> | PlayerStatCreateWithoutGameInput[] | PlayerStatUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutGameInput | PlayerStatCreateOrConnectWithoutGameInput[]
    upsert?: PlayerStatUpsertWithWhereUniqueWithoutGameInput | PlayerStatUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PlayerStatCreateManyGameInputEnvelope
    set?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    disconnect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    delete?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    update?: PlayerStatUpdateWithWhereUniqueWithoutGameInput | PlayerStatUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PlayerStatUpdateManyWithWhereWithoutGameInput | PlayerStatUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PlayerStatScalarWhereInput | PlayerStatScalarWhereInput[]
  }

  export type LeagueUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<LeagueCreateWithoutGameInput, LeagueUncheckedCreateWithoutGameInput> | LeagueCreateWithoutGameInput[] | LeagueUncheckedCreateWithoutGameInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutGameInput | LeagueCreateOrConnectWithoutGameInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutGameInput | LeagueUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: LeagueCreateManyGameInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutGameInput | LeagueUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutGameInput | LeagueUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type UserGameUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<UserGameCreateWithoutGameInput, UserGameUncheckedCreateWithoutGameInput> | UserGameCreateWithoutGameInput[] | UserGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserGameCreateOrConnectWithoutGameInput | UserGameCreateOrConnectWithoutGameInput[]
    upsert?: UserGameUpsertWithWhereUniqueWithoutGameInput | UserGameUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: UserGameCreateManyGameInputEnvelope
    set?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    disconnect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    delete?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    connect?: UserGameWhereUniqueInput | UserGameWhereUniqueInput[]
    update?: UserGameUpdateWithWhereUniqueWithoutGameInput | UserGameUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: UserGameUpdateManyWithWhereWithoutGameInput | UserGameUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: UserGameScalarWhereInput | UserGameScalarWhereInput[]
  }

  export type PlayerStatUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<PlayerStatCreateWithoutGameInput, PlayerStatUncheckedCreateWithoutGameInput> | PlayerStatCreateWithoutGameInput[] | PlayerStatUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutGameInput | PlayerStatCreateOrConnectWithoutGameInput[]
    upsert?: PlayerStatUpsertWithWhereUniqueWithoutGameInput | PlayerStatUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PlayerStatCreateManyGameInputEnvelope
    set?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    disconnect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    delete?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    update?: PlayerStatUpdateWithWhereUniqueWithoutGameInput | PlayerStatUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PlayerStatUpdateManyWithWhereWithoutGameInput | PlayerStatUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PlayerStatScalarWhereInput | PlayerStatScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGamesInput = {
    create?: XOR<UserCreateWithoutGamesInput, UserUncheckedCreateWithoutGamesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGamesInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutUsersInput = {
    create?: XOR<GameCreateWithoutUsersInput, GameUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GameCreateOrConnectWithoutUsersInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<UserCreateWithoutGamesInput, UserUncheckedCreateWithoutGamesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGamesInput
    upsert?: UserUpsertWithoutGamesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGamesInput, UserUpdateWithoutGamesInput>, UserUncheckedUpdateWithoutGamesInput>
  }

  export type GameUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<GameCreateWithoutUsersInput, GameUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GameCreateOrConnectWithoutUsersInput
    upsert?: GameUpsertWithoutUsersInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutUsersInput, GameUpdateWithoutUsersInput>, GameUncheckedUpdateWithoutUsersInput>
  }

  export type GameCreateNestedOneWithoutLeaguesInput = {
    create?: XOR<GameCreateWithoutLeaguesInput, GameUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: GameCreateOrConnectWithoutLeaguesInput
    connect?: GameWhereUniqueInput
  }

  export type TeamCreateNestedManyWithoutLeagueInput = {
    create?: XOR<TeamCreateWithoutLeagueInput, TeamUncheckedCreateWithoutLeagueInput> | TeamCreateWithoutLeagueInput[] | TeamUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLeagueInput | TeamCreateOrConnectWithoutLeagueInput[]
    createMany?: TeamCreateManyLeagueInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type LeagueSettingCreateNestedOneWithoutLeagueInput = {
    create?: XOR<LeagueSettingCreateWithoutLeagueInput, LeagueSettingUncheckedCreateWithoutLeagueInput>
    connectOrCreate?: LeagueSettingCreateOrConnectWithoutLeagueInput
    connect?: LeagueSettingWhereUniqueInput
  }

  export type TeamUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<TeamCreateWithoutLeagueInput, TeamUncheckedCreateWithoutLeagueInput> | TeamCreateWithoutLeagueInput[] | TeamUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLeagueInput | TeamCreateOrConnectWithoutLeagueInput[]
    createMany?: TeamCreateManyLeagueInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type LeagueSettingUncheckedCreateNestedOneWithoutLeagueInput = {
    create?: XOR<LeagueSettingCreateWithoutLeagueInput, LeagueSettingUncheckedCreateWithoutLeagueInput>
    connectOrCreate?: LeagueSettingCreateOrConnectWithoutLeagueInput
    connect?: LeagueSettingWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GameUpdateOneRequiredWithoutLeaguesNestedInput = {
    create?: XOR<GameCreateWithoutLeaguesInput, GameUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: GameCreateOrConnectWithoutLeaguesInput
    upsert?: GameUpsertWithoutLeaguesInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutLeaguesInput, GameUpdateWithoutLeaguesInput>, GameUncheckedUpdateWithoutLeaguesInput>
  }

  export type TeamUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<TeamCreateWithoutLeagueInput, TeamUncheckedCreateWithoutLeagueInput> | TeamCreateWithoutLeagueInput[] | TeamUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLeagueInput | TeamCreateOrConnectWithoutLeagueInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutLeagueInput | TeamUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: TeamCreateManyLeagueInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutLeagueInput | TeamUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutLeagueInput | TeamUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type LeagueSettingUpdateOneWithoutLeagueNestedInput = {
    create?: XOR<LeagueSettingCreateWithoutLeagueInput, LeagueSettingUncheckedCreateWithoutLeagueInput>
    connectOrCreate?: LeagueSettingCreateOrConnectWithoutLeagueInput
    upsert?: LeagueSettingUpsertWithoutLeagueInput
    disconnect?: LeagueSettingWhereInput | boolean
    delete?: LeagueSettingWhereInput | boolean
    connect?: LeagueSettingWhereUniqueInput
    update?: XOR<XOR<LeagueSettingUpdateToOneWithWhereWithoutLeagueInput, LeagueSettingUpdateWithoutLeagueInput>, LeagueSettingUncheckedUpdateWithoutLeagueInput>
  }

  export type TeamUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<TeamCreateWithoutLeagueInput, TeamUncheckedCreateWithoutLeagueInput> | TeamCreateWithoutLeagueInput[] | TeamUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLeagueInput | TeamCreateOrConnectWithoutLeagueInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutLeagueInput | TeamUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: TeamCreateManyLeagueInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutLeagueInput | TeamUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutLeagueInput | TeamUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type LeagueSettingUncheckedUpdateOneWithoutLeagueNestedInput = {
    create?: XOR<LeagueSettingCreateWithoutLeagueInput, LeagueSettingUncheckedCreateWithoutLeagueInput>
    connectOrCreate?: LeagueSettingCreateOrConnectWithoutLeagueInput
    upsert?: LeagueSettingUpsertWithoutLeagueInput
    disconnect?: LeagueSettingWhereInput | boolean
    delete?: LeagueSettingWhereInput | boolean
    connect?: LeagueSettingWhereUniqueInput
    update?: XOR<XOR<LeagueSettingUpdateToOneWithWhereWithoutLeagueInput, LeagueSettingUpdateWithoutLeagueInput>, LeagueSettingUncheckedUpdateWithoutLeagueInput>
  }

  export type LeagueCreateNestedOneWithoutSettingsInput = {
    create?: XOR<LeagueCreateWithoutSettingsInput, LeagueUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutSettingsInput
    connect?: LeagueWhereUniqueInput
  }

  export type LeagueUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<LeagueCreateWithoutSettingsInput, LeagueUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutSettingsInput
    upsert?: LeagueUpsertWithoutSettingsInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutSettingsInput, LeagueUpdateWithoutSettingsInput>, LeagueUncheckedUpdateWithoutSettingsInput>
  }

  export type LeagueCreateNestedOneWithoutTeamsInput = {
    create?: XOR<LeagueCreateWithoutTeamsInput, LeagueUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutTeamsInput
    connect?: LeagueWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamPlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamPlayerCreateWithoutTeamInput, TeamPlayerUncheckedCreateWithoutTeamInput> | TeamPlayerCreateWithoutTeamInput[] | TeamPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutTeamInput | TeamPlayerCreateOrConnectWithoutTeamInput[]
    createMany?: TeamPlayerCreateManyTeamInputEnvelope
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
  }

  export type TeamStandingCreateNestedOneWithoutTeamInput = {
    create?: XOR<TeamStandingCreateWithoutTeamInput, TeamStandingUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamStandingCreateOrConnectWithoutTeamInput
    connect?: TeamStandingWhereUniqueInput
  }

  export type TeamPlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamPlayerCreateWithoutTeamInput, TeamPlayerUncheckedCreateWithoutTeamInput> | TeamPlayerCreateWithoutTeamInput[] | TeamPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutTeamInput | TeamPlayerCreateOrConnectWithoutTeamInput[]
    createMany?: TeamPlayerCreateManyTeamInputEnvelope
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
  }

  export type TeamStandingUncheckedCreateNestedOneWithoutTeamInput = {
    create?: XOR<TeamStandingCreateWithoutTeamInput, TeamStandingUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamStandingCreateOrConnectWithoutTeamInput
    connect?: TeamStandingWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type LeagueUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<LeagueCreateWithoutTeamsInput, LeagueUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutTeamsInput
    upsert?: LeagueUpsertWithoutTeamsInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutTeamsInput, LeagueUpdateWithoutTeamsInput>, LeagueUncheckedUpdateWithoutTeamsInput>
  }

  export type UserUpdateOneWithoutTeamsNestedInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    upsert?: UserUpsertWithoutTeamsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamsInput, UserUpdateWithoutTeamsInput>, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type TeamPlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamPlayerCreateWithoutTeamInput, TeamPlayerUncheckedCreateWithoutTeamInput> | TeamPlayerCreateWithoutTeamInput[] | TeamPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutTeamInput | TeamPlayerCreateOrConnectWithoutTeamInput[]
    upsert?: TeamPlayerUpsertWithWhereUniqueWithoutTeamInput | TeamPlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamPlayerCreateManyTeamInputEnvelope
    set?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    disconnect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    delete?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    update?: TeamPlayerUpdateWithWhereUniqueWithoutTeamInput | TeamPlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamPlayerUpdateManyWithWhereWithoutTeamInput | TeamPlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamPlayerScalarWhereInput | TeamPlayerScalarWhereInput[]
  }

  export type TeamStandingUpdateOneWithoutTeamNestedInput = {
    create?: XOR<TeamStandingCreateWithoutTeamInput, TeamStandingUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamStandingCreateOrConnectWithoutTeamInput
    upsert?: TeamStandingUpsertWithoutTeamInput
    disconnect?: TeamStandingWhereInput | boolean
    delete?: TeamStandingWhereInput | boolean
    connect?: TeamStandingWhereUniqueInput
    update?: XOR<XOR<TeamStandingUpdateToOneWithWhereWithoutTeamInput, TeamStandingUpdateWithoutTeamInput>, TeamStandingUncheckedUpdateWithoutTeamInput>
  }

  export type TeamPlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamPlayerCreateWithoutTeamInput, TeamPlayerUncheckedCreateWithoutTeamInput> | TeamPlayerCreateWithoutTeamInput[] | TeamPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutTeamInput | TeamPlayerCreateOrConnectWithoutTeamInput[]
    upsert?: TeamPlayerUpsertWithWhereUniqueWithoutTeamInput | TeamPlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamPlayerCreateManyTeamInputEnvelope
    set?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    disconnect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    delete?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    update?: TeamPlayerUpdateWithWhereUniqueWithoutTeamInput | TeamPlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamPlayerUpdateManyWithWhereWithoutTeamInput | TeamPlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamPlayerScalarWhereInput | TeamPlayerScalarWhereInput[]
  }

  export type TeamStandingUncheckedUpdateOneWithoutTeamNestedInput = {
    create?: XOR<TeamStandingCreateWithoutTeamInput, TeamStandingUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamStandingCreateOrConnectWithoutTeamInput
    upsert?: TeamStandingUpsertWithoutTeamInput
    disconnect?: TeamStandingWhereInput | boolean
    delete?: TeamStandingWhereInput | boolean
    connect?: TeamStandingWhereUniqueInput
    update?: XOR<XOR<TeamStandingUpdateToOneWithWhereWithoutTeamInput, TeamStandingUpdateWithoutTeamInput>, TeamStandingUncheckedUpdateWithoutTeamInput>
  }

  export type TeamCreateNestedOneWithoutStandingsInput = {
    create?: XOR<TeamCreateWithoutStandingsInput, TeamUncheckedCreateWithoutStandingsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutStandingsInput
    connect?: TeamWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamUpdateOneRequiredWithoutStandingsNestedInput = {
    create?: XOR<TeamCreateWithoutStandingsInput, TeamUncheckedCreateWithoutStandingsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutStandingsInput
    upsert?: TeamUpsertWithoutStandingsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutStandingsInput, TeamUpdateWithoutStandingsInput>, TeamUncheckedUpdateWithoutStandingsInput>
  }

  export type TeamPlayerCreateNestedManyWithoutPlayerInput = {
    create?: XOR<TeamPlayerCreateWithoutPlayerInput, TeamPlayerUncheckedCreateWithoutPlayerInput> | TeamPlayerCreateWithoutPlayerInput[] | TeamPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutPlayerInput | TeamPlayerCreateOrConnectWithoutPlayerInput[]
    createMany?: TeamPlayerCreateManyPlayerInputEnvelope
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
  }

  export type PlayerStatCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerStatCreateWithoutPlayerInput, PlayerStatUncheckedCreateWithoutPlayerInput> | PlayerStatCreateWithoutPlayerInput[] | PlayerStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutPlayerInput | PlayerStatCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerStatCreateManyPlayerInputEnvelope
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
  }

  export type TeamPlayerUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<TeamPlayerCreateWithoutPlayerInput, TeamPlayerUncheckedCreateWithoutPlayerInput> | TeamPlayerCreateWithoutPlayerInput[] | TeamPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutPlayerInput | TeamPlayerCreateOrConnectWithoutPlayerInput[]
    createMany?: TeamPlayerCreateManyPlayerInputEnvelope
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
  }

  export type PlayerStatUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerStatCreateWithoutPlayerInput, PlayerStatUncheckedCreateWithoutPlayerInput> | PlayerStatCreateWithoutPlayerInput[] | PlayerStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutPlayerInput | PlayerStatCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerStatCreateManyPlayerInputEnvelope
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
  }

  export type TeamPlayerUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<TeamPlayerCreateWithoutPlayerInput, TeamPlayerUncheckedCreateWithoutPlayerInput> | TeamPlayerCreateWithoutPlayerInput[] | TeamPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutPlayerInput | TeamPlayerCreateOrConnectWithoutPlayerInput[]
    upsert?: TeamPlayerUpsertWithWhereUniqueWithoutPlayerInput | TeamPlayerUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: TeamPlayerCreateManyPlayerInputEnvelope
    set?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    disconnect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    delete?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    update?: TeamPlayerUpdateWithWhereUniqueWithoutPlayerInput | TeamPlayerUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: TeamPlayerUpdateManyWithWhereWithoutPlayerInput | TeamPlayerUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: TeamPlayerScalarWhereInput | TeamPlayerScalarWhereInput[]
  }

  export type PlayerStatUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerStatCreateWithoutPlayerInput, PlayerStatUncheckedCreateWithoutPlayerInput> | PlayerStatCreateWithoutPlayerInput[] | PlayerStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutPlayerInput | PlayerStatCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerStatUpsertWithWhereUniqueWithoutPlayerInput | PlayerStatUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerStatCreateManyPlayerInputEnvelope
    set?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    disconnect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    delete?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    update?: PlayerStatUpdateWithWhereUniqueWithoutPlayerInput | PlayerStatUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerStatUpdateManyWithWhereWithoutPlayerInput | PlayerStatUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerStatScalarWhereInput | PlayerStatScalarWhereInput[]
  }

  export type TeamPlayerUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<TeamPlayerCreateWithoutPlayerInput, TeamPlayerUncheckedCreateWithoutPlayerInput> | TeamPlayerCreateWithoutPlayerInput[] | TeamPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: TeamPlayerCreateOrConnectWithoutPlayerInput | TeamPlayerCreateOrConnectWithoutPlayerInput[]
    upsert?: TeamPlayerUpsertWithWhereUniqueWithoutPlayerInput | TeamPlayerUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: TeamPlayerCreateManyPlayerInputEnvelope
    set?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    disconnect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    delete?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    connect?: TeamPlayerWhereUniqueInput | TeamPlayerWhereUniqueInput[]
    update?: TeamPlayerUpdateWithWhereUniqueWithoutPlayerInput | TeamPlayerUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: TeamPlayerUpdateManyWithWhereWithoutPlayerInput | TeamPlayerUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: TeamPlayerScalarWhereInput | TeamPlayerScalarWhereInput[]
  }

  export type PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerStatCreateWithoutPlayerInput, PlayerStatUncheckedCreateWithoutPlayerInput> | PlayerStatCreateWithoutPlayerInput[] | PlayerStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerStatCreateOrConnectWithoutPlayerInput | PlayerStatCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerStatUpsertWithWhereUniqueWithoutPlayerInput | PlayerStatUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerStatCreateManyPlayerInputEnvelope
    set?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    disconnect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    delete?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    connect?: PlayerStatWhereUniqueInput | PlayerStatWhereUniqueInput[]
    update?: PlayerStatUpdateWithWhereUniqueWithoutPlayerInput | PlayerStatUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerStatUpdateManyWithWhereWithoutPlayerInput | PlayerStatUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerStatScalarWhereInput | PlayerStatScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutRosterInput = {
    create?: XOR<TeamCreateWithoutRosterInput, TeamUncheckedCreateWithoutRosterInput>
    connectOrCreate?: TeamCreateOrConnectWithoutRosterInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutTeamsInput = {
    create?: XOR<PlayerCreateWithoutTeamsInput, PlayerUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamsInput
    connect?: PlayerWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutRosterNestedInput = {
    create?: XOR<TeamCreateWithoutRosterInput, TeamUncheckedCreateWithoutRosterInput>
    connectOrCreate?: TeamCreateOrConnectWithoutRosterInput
    upsert?: TeamUpsertWithoutRosterInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutRosterInput, TeamUpdateWithoutRosterInput>, TeamUncheckedUpdateWithoutRosterInput>
  }

  export type PlayerUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamsInput, PlayerUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamsInput
    upsert?: PlayerUpsertWithoutTeamsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutTeamsInput, PlayerUpdateWithoutTeamsInput>, PlayerUncheckedUpdateWithoutTeamsInput>
  }

  export type PlayerCreateNestedOneWithoutStatsInput = {
    create?: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatsInput
    connect?: PlayerWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutPlayerStatsInput = {
    create?: XOR<GameCreateWithoutPlayerStatsInput, GameUncheckedCreateWithoutPlayerStatsInput>
    connectOrCreate?: GameCreateOrConnectWithoutPlayerStatsInput
    connect?: GameWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatsInput
    upsert?: PlayerUpsertWithoutStatsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutStatsInput, PlayerUpdateWithoutStatsInput>, PlayerUncheckedUpdateWithoutStatsInput>
  }

  export type GameUpdateOneRequiredWithoutPlayerStatsNestedInput = {
    create?: XOR<GameCreateWithoutPlayerStatsInput, GameUncheckedCreateWithoutPlayerStatsInput>
    connectOrCreate?: GameCreateOrConnectWithoutPlayerStatsInput
    upsert?: GameUpsertWithoutPlayerStatsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutPlayerStatsInput, GameUpdateWithoutPlayerStatsInput>, GameUncheckedUpdateWithoutPlayerStatsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type UserGameCreateWithoutUserInput = {
    created_at?: Date | string
    game: GameCreateNestedOneWithoutUsersInput
  }

  export type UserGameUncheckedCreateWithoutUserInput = {
    id?: number
    game_id: number
    created_at?: Date | string
  }

  export type UserGameCreateOrConnectWithoutUserInput = {
    where: UserGameWhereUniqueInput
    create: XOR<UserGameCreateWithoutUserInput, UserGameUncheckedCreateWithoutUserInput>
  }

  export type UserGameCreateManyUserInputEnvelope = {
    data: UserGameCreateManyUserInput | UserGameCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutManagerInput = {
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    created_at?: Date | string
    updated_at?: Date | string
    league: LeagueCreateNestedOneWithoutTeamsInput
    roster?: TeamPlayerCreateNestedManyWithoutTeamInput
    standings?: TeamStandingCreateNestedOneWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutManagerInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    league_id: number
    created_at?: Date | string
    updated_at?: Date | string
    roster?: TeamPlayerUncheckedCreateNestedManyWithoutTeamInput
    standings?: TeamStandingUncheckedCreateNestedOneWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutManagerInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutManagerInput, TeamUncheckedCreateWithoutManagerInput>
  }

  export type TeamCreateManyManagerInputEnvelope = {
    data: TeamCreateManyManagerInput | TeamCreateManyManagerInput[]
    skipDuplicates?: boolean
  }

  export type UserGameUpsertWithWhereUniqueWithoutUserInput = {
    where: UserGameWhereUniqueInput
    update: XOR<UserGameUpdateWithoutUserInput, UserGameUncheckedUpdateWithoutUserInput>
    create: XOR<UserGameCreateWithoutUserInput, UserGameUncheckedCreateWithoutUserInput>
  }

  export type UserGameUpdateWithWhereUniqueWithoutUserInput = {
    where: UserGameWhereUniqueInput
    data: XOR<UserGameUpdateWithoutUserInput, UserGameUncheckedUpdateWithoutUserInput>
  }

  export type UserGameUpdateManyWithWhereWithoutUserInput = {
    where: UserGameScalarWhereInput
    data: XOR<UserGameUpdateManyMutationInput, UserGameUncheckedUpdateManyWithoutUserInput>
  }

  export type UserGameScalarWhereInput = {
    AND?: UserGameScalarWhereInput | UserGameScalarWhereInput[]
    OR?: UserGameScalarWhereInput[]
    NOT?: UserGameScalarWhereInput | UserGameScalarWhereInput[]
    id?: IntFilter<"UserGame"> | number
    user_id?: IntFilter<"UserGame"> | number
    game_id?: IntFilter<"UserGame"> | number
    created_at?: DateTimeFilter<"UserGame"> | Date | string
  }

  export type TeamUpsertWithWhereUniqueWithoutManagerInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutManagerInput, TeamUncheckedUpdateWithoutManagerInput>
    create: XOR<TeamCreateWithoutManagerInput, TeamUncheckedCreateWithoutManagerInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutManagerInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutManagerInput, TeamUncheckedUpdateWithoutManagerInput>
  }

  export type TeamUpdateManyWithWhereWithoutManagerInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutManagerInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: IntFilter<"Team"> | number
    team_key?: StringFilter<"Team"> | string
    team_id?: StringNullableFilter<"Team"> | string | null
    name?: StringNullableFilter<"Team"> | string | null
    is_owned_by_current_user?: BoolFilter<"Team"> | boolean
    url?: StringNullableFilter<"Team"> | string | null
    team_logo?: StringNullableFilter<"Team"> | string | null
    waiver_priority?: IntNullableFilter<"Team"> | number | null
    number_of_moves?: IntFilter<"Team"> | number
    number_of_trades?: IntFilter<"Team"> | number
    league_id?: IntFilter<"Team"> | number
    manager_user_id?: IntNullableFilter<"Team"> | number | null
    created_at?: DateTimeFilter<"Team"> | Date | string
    updated_at?: DateTimeFilter<"Team"> | Date | string
  }

  export type LeagueCreateWithoutGameInput = {
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamCreateNestedManyWithoutLeagueInput
    settings?: LeagueSettingCreateNestedOneWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutGameInput = {
    id?: number
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutLeagueInput
    settings?: LeagueSettingUncheckedCreateNestedOneWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutGameInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutGameInput, LeagueUncheckedCreateWithoutGameInput>
  }

  export type LeagueCreateManyGameInputEnvelope = {
    data: LeagueCreateManyGameInput | LeagueCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type UserGameCreateWithoutGameInput = {
    created_at?: Date | string
    user: UserCreateNestedOneWithoutGamesInput
  }

  export type UserGameUncheckedCreateWithoutGameInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type UserGameCreateOrConnectWithoutGameInput = {
    where: UserGameWhereUniqueInput
    create: XOR<UserGameCreateWithoutGameInput, UserGameUncheckedCreateWithoutGameInput>
  }

  export type UserGameCreateManyGameInputEnvelope = {
    data: UserGameCreateManyGameInput | UserGameCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type PlayerStatCreateWithoutGameInput = {
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    player: PlayerCreateNestedOneWithoutStatsInput
  }

  export type PlayerStatUncheckedCreateWithoutGameInput = {
    id?: number
    player_id: number
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PlayerStatCreateOrConnectWithoutGameInput = {
    where: PlayerStatWhereUniqueInput
    create: XOR<PlayerStatCreateWithoutGameInput, PlayerStatUncheckedCreateWithoutGameInput>
  }

  export type PlayerStatCreateManyGameInputEnvelope = {
    data: PlayerStatCreateManyGameInput | PlayerStatCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type LeagueUpsertWithWhereUniqueWithoutGameInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutGameInput, LeagueUncheckedUpdateWithoutGameInput>
    create: XOR<LeagueCreateWithoutGameInput, LeagueUncheckedCreateWithoutGameInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutGameInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutGameInput, LeagueUncheckedUpdateWithoutGameInput>
  }

  export type LeagueUpdateManyWithWhereWithoutGameInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutGameInput>
  }

  export type LeagueScalarWhereInput = {
    AND?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    OR?: LeagueScalarWhereInput[]
    NOT?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    id?: IntFilter<"League"> | number
    league_key?: StringFilter<"League"> | string
    league_id?: StringNullableFilter<"League"> | string | null
    name?: StringNullableFilter<"League"> | string | null
    url?: StringNullableFilter<"League"> | string | null
    draft_status?: StringNullableFilter<"League"> | string | null
    num_teams?: IntNullableFilter<"League"> | number | null
    scoring_type?: StringNullableFilter<"League"> | string | null
    current_week?: IntNullableFilter<"League"> | number | null
    start_week?: IntNullableFilter<"League"> | number | null
    end_week?: IntNullableFilter<"League"> | number | null
    start_date?: DateTimeNullableFilter<"League"> | Date | string | null
    end_date?: DateTimeNullableFilter<"League"> | Date | string | null
    game_id?: IntFilter<"League"> | number
    created_at?: DateTimeFilter<"League"> | Date | string
    updated_at?: DateTimeFilter<"League"> | Date | string
  }

  export type UserGameUpsertWithWhereUniqueWithoutGameInput = {
    where: UserGameWhereUniqueInput
    update: XOR<UserGameUpdateWithoutGameInput, UserGameUncheckedUpdateWithoutGameInput>
    create: XOR<UserGameCreateWithoutGameInput, UserGameUncheckedCreateWithoutGameInput>
  }

  export type UserGameUpdateWithWhereUniqueWithoutGameInput = {
    where: UserGameWhereUniqueInput
    data: XOR<UserGameUpdateWithoutGameInput, UserGameUncheckedUpdateWithoutGameInput>
  }

  export type UserGameUpdateManyWithWhereWithoutGameInput = {
    where: UserGameScalarWhereInput
    data: XOR<UserGameUpdateManyMutationInput, UserGameUncheckedUpdateManyWithoutGameInput>
  }

  export type PlayerStatUpsertWithWhereUniqueWithoutGameInput = {
    where: PlayerStatWhereUniqueInput
    update: XOR<PlayerStatUpdateWithoutGameInput, PlayerStatUncheckedUpdateWithoutGameInput>
    create: XOR<PlayerStatCreateWithoutGameInput, PlayerStatUncheckedCreateWithoutGameInput>
  }

  export type PlayerStatUpdateWithWhereUniqueWithoutGameInput = {
    where: PlayerStatWhereUniqueInput
    data: XOR<PlayerStatUpdateWithoutGameInput, PlayerStatUncheckedUpdateWithoutGameInput>
  }

  export type PlayerStatUpdateManyWithWhereWithoutGameInput = {
    where: PlayerStatScalarWhereInput
    data: XOR<PlayerStatUpdateManyMutationInput, PlayerStatUncheckedUpdateManyWithoutGameInput>
  }

  export type PlayerStatScalarWhereInput = {
    AND?: PlayerStatScalarWhereInput | PlayerStatScalarWhereInput[]
    OR?: PlayerStatScalarWhereInput[]
    NOT?: PlayerStatScalarWhereInput | PlayerStatScalarWhereInput[]
    id?: IntFilter<"PlayerStat"> | number
    player_id?: IntFilter<"PlayerStat"> | number
    game_id?: IntFilter<"PlayerStat"> | number
    season?: StringNullableFilter<"PlayerStat"> | string | null
    week?: IntNullableFilter<"PlayerStat"> | number | null
    stats_data?: StringNullableFilter<"PlayerStat"> | string | null
    created_at?: DateTimeFilter<"PlayerStat"> | Date | string
    updated_at?: DateTimeFilter<"PlayerStat"> | Date | string
  }

  export type UserCreateWithoutGamesInput = {
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamCreateNestedManyWithoutManagerInput
  }

  export type UserUncheckedCreateWithoutGamesInput = {
    id?: number
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutManagerInput
  }

  export type UserCreateOrConnectWithoutGamesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGamesInput, UserUncheckedCreateWithoutGamesInput>
  }

  export type GameCreateWithoutUsersInput = {
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    leagues?: LeagueCreateNestedManyWithoutGameInput
    playerStats?: PlayerStatCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutUsersInput = {
    id?: number
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutGameInput
    playerStats?: PlayerStatUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutUsersInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUsersInput, GameUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutGamesInput = {
    update: XOR<UserUpdateWithoutGamesInput, UserUncheckedUpdateWithoutGamesInput>
    create: XOR<UserCreateWithoutGamesInput, UserUncheckedCreateWithoutGamesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGamesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGamesInput, UserUncheckedUpdateWithoutGamesInput>
  }

  export type UserUpdateWithoutGamesInput = {
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutManagerNestedInput
  }

  export type UserUncheckedUpdateWithoutGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutManagerNestedInput
  }

  export type GameUpsertWithoutUsersInput = {
    update: XOR<GameUpdateWithoutUsersInput, GameUncheckedUpdateWithoutUsersInput>
    create: XOR<GameCreateWithoutUsersInput, GameUncheckedCreateWithoutUsersInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutUsersInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutUsersInput, GameUncheckedUpdateWithoutUsersInput>
  }

  export type GameUpdateWithoutUsersInput = {
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutGameNestedInput
    playerStats?: PlayerStatUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutGameNestedInput
    playerStats?: PlayerStatUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateWithoutLeaguesInput = {
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    users?: UserGameCreateNestedManyWithoutGameInput
    playerStats?: PlayerStatCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutLeaguesInput = {
    id?: number
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    users?: UserGameUncheckedCreateNestedManyWithoutGameInput
    playerStats?: PlayerStatUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutLeaguesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutLeaguesInput, GameUncheckedCreateWithoutLeaguesInput>
  }

  export type TeamCreateWithoutLeagueInput = {
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    created_at?: Date | string
    updated_at?: Date | string
    manager?: UserCreateNestedOneWithoutTeamsInput
    roster?: TeamPlayerCreateNestedManyWithoutTeamInput
    standings?: TeamStandingCreateNestedOneWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutLeagueInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    manager_user_id?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    roster?: TeamPlayerUncheckedCreateNestedManyWithoutTeamInput
    standings?: TeamStandingUncheckedCreateNestedOneWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutLeagueInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutLeagueInput, TeamUncheckedCreateWithoutLeagueInput>
  }

  export type TeamCreateManyLeagueInputEnvelope = {
    data: TeamCreateManyLeagueInput | TeamCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type LeagueSettingCreateWithoutLeagueInput = {
    settings_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeagueSettingUncheckedCreateWithoutLeagueInput = {
    id?: number
    settings_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeagueSettingCreateOrConnectWithoutLeagueInput = {
    where: LeagueSettingWhereUniqueInput
    create: XOR<LeagueSettingCreateWithoutLeagueInput, LeagueSettingUncheckedCreateWithoutLeagueInput>
  }

  export type GameUpsertWithoutLeaguesInput = {
    update: XOR<GameUpdateWithoutLeaguesInput, GameUncheckedUpdateWithoutLeaguesInput>
    create: XOR<GameCreateWithoutLeaguesInput, GameUncheckedCreateWithoutLeaguesInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutLeaguesInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutLeaguesInput, GameUncheckedUpdateWithoutLeaguesInput>
  }

  export type GameUpdateWithoutLeaguesInput = {
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserGameUpdateManyWithoutGameNestedInput
    playerStats?: PlayerStatUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutLeaguesInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserGameUncheckedUpdateManyWithoutGameNestedInput
    playerStats?: PlayerStatUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TeamUpsertWithWhereUniqueWithoutLeagueInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutLeagueInput, TeamUncheckedUpdateWithoutLeagueInput>
    create: XOR<TeamCreateWithoutLeagueInput, TeamUncheckedCreateWithoutLeagueInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutLeagueInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutLeagueInput, TeamUncheckedUpdateWithoutLeagueInput>
  }

  export type TeamUpdateManyWithWhereWithoutLeagueInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutLeagueInput>
  }

  export type LeagueSettingUpsertWithoutLeagueInput = {
    update: XOR<LeagueSettingUpdateWithoutLeagueInput, LeagueSettingUncheckedUpdateWithoutLeagueInput>
    create: XOR<LeagueSettingCreateWithoutLeagueInput, LeagueSettingUncheckedCreateWithoutLeagueInput>
    where?: LeagueSettingWhereInput
  }

  export type LeagueSettingUpdateToOneWithWhereWithoutLeagueInput = {
    where?: LeagueSettingWhereInput
    data: XOR<LeagueSettingUpdateWithoutLeagueInput, LeagueSettingUncheckedUpdateWithoutLeagueInput>
  }

  export type LeagueSettingUpdateWithoutLeagueInput = {
    settings_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueSettingUncheckedUpdateWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    settings_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateWithoutSettingsInput = {
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    game: GameCreateNestedOneWithoutLeaguesInput
    teams?: TeamCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutSettingsInput = {
    id?: number
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutSettingsInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutSettingsInput, LeagueUncheckedCreateWithoutSettingsInput>
  }

  export type LeagueUpsertWithoutSettingsInput = {
    update: XOR<LeagueUpdateWithoutSettingsInput, LeagueUncheckedUpdateWithoutSettingsInput>
    create: XOR<LeagueCreateWithoutSettingsInput, LeagueUncheckedCreateWithoutSettingsInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutSettingsInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutSettingsInput, LeagueUncheckedUpdateWithoutSettingsInput>
  }

  export type LeagueUpdateWithoutSettingsInput = {
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutLeaguesNestedInput
    teams?: TeamUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueCreateWithoutTeamsInput = {
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    game: GameCreateNestedOneWithoutLeaguesInput
    settings?: LeagueSettingCreateNestedOneWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutTeamsInput = {
    id?: number
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
    settings?: LeagueSettingUncheckedCreateNestedOneWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutTeamsInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutTeamsInput, LeagueUncheckedCreateWithoutTeamsInput>
  }

  export type UserCreateWithoutTeamsInput = {
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    games?: UserGameCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamsInput = {
    id?: number
    yahoo_guid: string
    name?: string | null
    nickname?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    games?: UserGameUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type TeamPlayerCreateWithoutTeamInput = {
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    player: PlayerCreateNestedOneWithoutTeamsInput
  }

  export type TeamPlayerUncheckedCreateWithoutTeamInput = {
    id?: number
    player_id: number
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamPlayerCreateOrConnectWithoutTeamInput = {
    where: TeamPlayerWhereUniqueInput
    create: XOR<TeamPlayerCreateWithoutTeamInput, TeamPlayerUncheckedCreateWithoutTeamInput>
  }

  export type TeamPlayerCreateManyTeamInputEnvelope = {
    data: TeamPlayerCreateManyTeamInput | TeamPlayerCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TeamStandingCreateWithoutTeamInput = {
    rank?: number | null
    points_for?: number | null
    points_against?: number | null
    wins?: number
    losses?: number
    ties?: number
    percentage?: number | null
    streak?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamStandingUncheckedCreateWithoutTeamInput = {
    id?: number
    rank?: number | null
    points_for?: number | null
    points_against?: number | null
    wins?: number
    losses?: number
    ties?: number
    percentage?: number | null
    streak?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamStandingCreateOrConnectWithoutTeamInput = {
    where: TeamStandingWhereUniqueInput
    create: XOR<TeamStandingCreateWithoutTeamInput, TeamStandingUncheckedCreateWithoutTeamInput>
  }

  export type LeagueUpsertWithoutTeamsInput = {
    update: XOR<LeagueUpdateWithoutTeamsInput, LeagueUncheckedUpdateWithoutTeamsInput>
    create: XOR<LeagueCreateWithoutTeamsInput, LeagueUncheckedCreateWithoutTeamsInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutTeamsInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutTeamsInput, LeagueUncheckedUpdateWithoutTeamsInput>
  }

  export type LeagueUpdateWithoutTeamsInput = {
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutLeaguesNestedInput
    settings?: LeagueSettingUpdateOneWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: LeagueSettingUncheckedUpdateOneWithoutLeagueNestedInput
  }

  export type UserUpsertWithoutTeamsInput = {
    update: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type UserUpdateWithoutTeamsInput = {
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: UserGameUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    yahoo_guid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: UserGameUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamPlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamPlayerWhereUniqueInput
    update: XOR<TeamPlayerUpdateWithoutTeamInput, TeamPlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamPlayerCreateWithoutTeamInput, TeamPlayerUncheckedCreateWithoutTeamInput>
  }

  export type TeamPlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamPlayerWhereUniqueInput
    data: XOR<TeamPlayerUpdateWithoutTeamInput, TeamPlayerUncheckedUpdateWithoutTeamInput>
  }

  export type TeamPlayerUpdateManyWithWhereWithoutTeamInput = {
    where: TeamPlayerScalarWhereInput
    data: XOR<TeamPlayerUpdateManyMutationInput, TeamPlayerUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamPlayerScalarWhereInput = {
    AND?: TeamPlayerScalarWhereInput | TeamPlayerScalarWhereInput[]
    OR?: TeamPlayerScalarWhereInput[]
    NOT?: TeamPlayerScalarWhereInput | TeamPlayerScalarWhereInput[]
    id?: IntFilter<"TeamPlayer"> | number
    team_id?: IntFilter<"TeamPlayer"> | number
    player_id?: IntFilter<"TeamPlayer"> | number
    position?: StringNullableFilter<"TeamPlayer"> | string | null
    selected_position?: StringNullableFilter<"TeamPlayer"> | string | null
    is_starting?: BoolFilter<"TeamPlayer"> | boolean
    created_at?: DateTimeFilter<"TeamPlayer"> | Date | string
    updated_at?: DateTimeFilter<"TeamPlayer"> | Date | string
  }

  export type TeamStandingUpsertWithoutTeamInput = {
    update: XOR<TeamStandingUpdateWithoutTeamInput, TeamStandingUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamStandingCreateWithoutTeamInput, TeamStandingUncheckedCreateWithoutTeamInput>
    where?: TeamStandingWhereInput
  }

  export type TeamStandingUpdateToOneWithWhereWithoutTeamInput = {
    where?: TeamStandingWhereInput
    data: XOR<TeamStandingUpdateWithoutTeamInput, TeamStandingUncheckedUpdateWithoutTeamInput>
  }

  export type TeamStandingUpdateWithoutTeamInput = {
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    points_for?: NullableFloatFieldUpdateOperationsInput | number | null
    points_against?: NullableFloatFieldUpdateOperationsInput | number | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStandingUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    points_for?: NullableFloatFieldUpdateOperationsInput | number | null
    points_against?: NullableFloatFieldUpdateOperationsInput | number | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateWithoutStandingsInput = {
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    created_at?: Date | string
    updated_at?: Date | string
    league: LeagueCreateNestedOneWithoutTeamsInput
    manager?: UserCreateNestedOneWithoutTeamsInput
    roster?: TeamPlayerCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutStandingsInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    league_id: number
    manager_user_id?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    roster?: TeamPlayerUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutStandingsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutStandingsInput, TeamUncheckedCreateWithoutStandingsInput>
  }

  export type TeamUpsertWithoutStandingsInput = {
    update: XOR<TeamUpdateWithoutStandingsInput, TeamUncheckedUpdateWithoutStandingsInput>
    create: XOR<TeamCreateWithoutStandingsInput, TeamUncheckedCreateWithoutStandingsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutStandingsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutStandingsInput, TeamUncheckedUpdateWithoutStandingsInput>
  }

  export type TeamUpdateWithoutStandingsInput = {
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutTeamsNestedInput
    manager?: UserUpdateOneWithoutTeamsNestedInput
    roster?: TeamPlayerUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutStandingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    manager_user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    roster?: TeamPlayerUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamPlayerCreateWithoutPlayerInput = {
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    team: TeamCreateNestedOneWithoutRosterInput
  }

  export type TeamPlayerUncheckedCreateWithoutPlayerInput = {
    id?: number
    team_id: number
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamPlayerCreateOrConnectWithoutPlayerInput = {
    where: TeamPlayerWhereUniqueInput
    create: XOR<TeamPlayerCreateWithoutPlayerInput, TeamPlayerUncheckedCreateWithoutPlayerInput>
  }

  export type TeamPlayerCreateManyPlayerInputEnvelope = {
    data: TeamPlayerCreateManyPlayerInput | TeamPlayerCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PlayerStatCreateWithoutPlayerInput = {
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    game: GameCreateNestedOneWithoutPlayerStatsInput
  }

  export type PlayerStatUncheckedCreateWithoutPlayerInput = {
    id?: number
    game_id: number
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PlayerStatCreateOrConnectWithoutPlayerInput = {
    where: PlayerStatWhereUniqueInput
    create: XOR<PlayerStatCreateWithoutPlayerInput, PlayerStatUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerStatCreateManyPlayerInputEnvelope = {
    data: PlayerStatCreateManyPlayerInput | PlayerStatCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type TeamPlayerUpsertWithWhereUniqueWithoutPlayerInput = {
    where: TeamPlayerWhereUniqueInput
    update: XOR<TeamPlayerUpdateWithoutPlayerInput, TeamPlayerUncheckedUpdateWithoutPlayerInput>
    create: XOR<TeamPlayerCreateWithoutPlayerInput, TeamPlayerUncheckedCreateWithoutPlayerInput>
  }

  export type TeamPlayerUpdateWithWhereUniqueWithoutPlayerInput = {
    where: TeamPlayerWhereUniqueInput
    data: XOR<TeamPlayerUpdateWithoutPlayerInput, TeamPlayerUncheckedUpdateWithoutPlayerInput>
  }

  export type TeamPlayerUpdateManyWithWhereWithoutPlayerInput = {
    where: TeamPlayerScalarWhereInput
    data: XOR<TeamPlayerUpdateManyMutationInput, TeamPlayerUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerStatUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerStatWhereUniqueInput
    update: XOR<PlayerStatUpdateWithoutPlayerInput, PlayerStatUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerStatCreateWithoutPlayerInput, PlayerStatUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerStatUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerStatWhereUniqueInput
    data: XOR<PlayerStatUpdateWithoutPlayerInput, PlayerStatUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerStatUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerStatScalarWhereInput
    data: XOR<PlayerStatUpdateManyMutationInput, PlayerStatUncheckedUpdateManyWithoutPlayerInput>
  }

  export type TeamCreateWithoutRosterInput = {
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    created_at?: Date | string
    updated_at?: Date | string
    league: LeagueCreateNestedOneWithoutTeamsInput
    manager?: UserCreateNestedOneWithoutTeamsInput
    standings?: TeamStandingCreateNestedOneWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutRosterInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    league_id: number
    manager_user_id?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    standings?: TeamStandingUncheckedCreateNestedOneWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutRosterInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutRosterInput, TeamUncheckedCreateWithoutRosterInput>
  }

  export type PlayerCreateWithoutTeamsInput = {
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    stats?: PlayerStatCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutTeamsInput = {
    id?: number
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    stats?: PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutTeamsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamsInput, PlayerUncheckedCreateWithoutTeamsInput>
  }

  export type TeamUpsertWithoutRosterInput = {
    update: XOR<TeamUpdateWithoutRosterInput, TeamUncheckedUpdateWithoutRosterInput>
    create: XOR<TeamCreateWithoutRosterInput, TeamUncheckedCreateWithoutRosterInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutRosterInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutRosterInput, TeamUncheckedUpdateWithoutRosterInput>
  }

  export type TeamUpdateWithoutRosterInput = {
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutTeamsNestedInput
    manager?: UserUpdateOneWithoutTeamsNestedInput
    standings?: TeamStandingUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutRosterInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    manager_user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    standings?: TeamStandingUncheckedUpdateOneWithoutTeamNestedInput
  }

  export type PlayerUpsertWithoutTeamsInput = {
    update: XOR<PlayerUpdateWithoutTeamsInput, PlayerUncheckedUpdateWithoutTeamsInput>
    create: XOR<PlayerCreateWithoutTeamsInput, PlayerUncheckedCreateWithoutTeamsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutTeamsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutTeamsInput, PlayerUncheckedUpdateWithoutTeamsInput>
  }

  export type PlayerUpdateWithoutTeamsInput = {
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    stats?: PlayerStatUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    stats?: PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateWithoutStatsInput = {
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamPlayerCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutStatsInput = {
    id?: number
    player_key: string
    player_id?: string | null
    name?: string | null
    first_name?: string | null
    last_name?: string | null
    editorial_player_key?: string | null
    editorial_team_key?: string | null
    editorial_team_full_name?: string | null
    editorial_team_abbr?: string | null
    uniform_number?: string | null
    display_position?: string | null
    headshot_url?: string | null
    is_undroppable?: boolean
    position_type?: string | null
    eligible_positions?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    teams?: TeamPlayerUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutStatsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
  }

  export type GameCreateWithoutPlayerStatsInput = {
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    leagues?: LeagueCreateNestedManyWithoutGameInput
    users?: UserGameCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutPlayerStatsInput = {
    id?: number
    game_key: string
    game_id: string
    name?: string | null
    code?: string | null
    type?: string | null
    url?: string | null
    season?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutGameInput
    users?: UserGameUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutPlayerStatsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutPlayerStatsInput, GameUncheckedCreateWithoutPlayerStatsInput>
  }

  export type PlayerUpsertWithoutStatsInput = {
    update: XOR<PlayerUpdateWithoutStatsInput, PlayerUncheckedUpdateWithoutStatsInput>
    create: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutStatsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutStatsInput, PlayerUncheckedUpdateWithoutStatsInput>
  }

  export type PlayerUpdateWithoutStatsInput = {
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamPlayerUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_key?: StringFieldUpdateOperationsInput | string
    player_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_player_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_key?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_full_name?: NullableStringFieldUpdateOperationsInput | string | null
    editorial_team_abbr?: NullableStringFieldUpdateOperationsInput | string | null
    uniform_number?: NullableStringFieldUpdateOperationsInput | string | null
    display_position?: NullableStringFieldUpdateOperationsInput | string | null
    headshot_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_undroppable?: BoolFieldUpdateOperationsInput | boolean
    position_type?: NullableStringFieldUpdateOperationsInput | string | null
    eligible_positions?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamPlayerUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type GameUpsertWithoutPlayerStatsInput = {
    update: XOR<GameUpdateWithoutPlayerStatsInput, GameUncheckedUpdateWithoutPlayerStatsInput>
    create: XOR<GameCreateWithoutPlayerStatsInput, GameUncheckedCreateWithoutPlayerStatsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutPlayerStatsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutPlayerStatsInput, GameUncheckedUpdateWithoutPlayerStatsInput>
  }

  export type GameUpdateWithoutPlayerStatsInput = {
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutGameNestedInput
    users?: UserGameUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutPlayerStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_key?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutGameNestedInput
    users?: UserGameUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserGameCreateManyUserInput = {
    id?: number
    game_id: number
    created_at?: Date | string
  }

  export type TeamCreateManyManagerInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    league_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserGameUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserGameUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGameUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutManagerInput = {
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutTeamsNestedInput
    roster?: TeamPlayerUpdateManyWithoutTeamNestedInput
    standings?: TeamStandingUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    roster?: TeamPlayerUncheckedUpdateManyWithoutTeamNestedInput
    standings?: TeamStandingUncheckedUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateManyGameInput = {
    id?: number
    league_key: string
    league_id?: string | null
    name?: string | null
    url?: string | null
    draft_status?: string | null
    num_teams?: number | null
    scoring_type?: string | null
    current_week?: number | null
    start_week?: number | null
    end_week?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserGameCreateManyGameInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type PlayerStatCreateManyGameInput = {
    id?: number
    player_id: number
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeagueUpdateWithoutGameInput = {
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutLeagueNestedInput
    settings?: LeagueSettingUpdateOneWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutLeagueNestedInput
    settings?: LeagueSettingUncheckedUpdateOneWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_key?: StringFieldUpdateOperationsInput | string
    league_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    draft_status?: NullableStringFieldUpdateOperationsInput | string | null
    num_teams?: NullableIntFieldUpdateOperationsInput | number | null
    scoring_type?: NullableStringFieldUpdateOperationsInput | string | null
    current_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_week?: NullableIntFieldUpdateOperationsInput | number | null
    end_week?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGameUpdateWithoutGameInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGamesNestedInput
  }

  export type UserGameUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGameUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatUpdateWithoutGameInput = {
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutStatsNestedInput
  }

  export type PlayerStatUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateManyLeagueInput = {
    id?: number
    team_key: string
    team_id?: string | null
    name?: string | null
    is_owned_by_current_user?: boolean
    url?: string | null
    team_logo?: string | null
    waiver_priority?: number | null
    number_of_moves?: number
    number_of_trades?: number
    manager_user_id?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamUpdateWithoutLeagueInput = {
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutTeamsNestedInput
    roster?: TeamPlayerUpdateManyWithoutTeamNestedInput
    standings?: TeamStandingUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    manager_user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    roster?: TeamPlayerUncheckedUpdateManyWithoutTeamNestedInput
    standings?: TeamStandingUncheckedUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_key?: StringFieldUpdateOperationsInput | string
    team_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    is_owned_by_current_user?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    team_logo?: NullableStringFieldUpdateOperationsInput | string | null
    waiver_priority?: NullableIntFieldUpdateOperationsInput | number | null
    number_of_moves?: IntFieldUpdateOperationsInput | number
    number_of_trades?: IntFieldUpdateOperationsInput | number
    manager_user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerCreateManyTeamInput = {
    id?: number
    player_id: number
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamPlayerUpdateWithoutTeamInput = {
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type TeamPlayerUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerCreateManyPlayerInput = {
    id?: number
    team_id: number
    position?: string | null
    selected_position?: string | null
    is_starting?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PlayerStatCreateManyPlayerInput = {
    id?: number
    game_id: number
    season?: string | null
    week?: number | null
    stats_data?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamPlayerUpdateWithoutPlayerInput = {
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutRosterNestedInput
  }

  export type TeamPlayerUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamPlayerUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    selected_position?: NullableStringFieldUpdateOperationsInput | string | null
    is_starting?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatUpdateWithoutPlayerInput = {
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutPlayerStatsNestedInput
  }

  export type PlayerStatUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerStatUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    season?: NullableStringFieldUpdateOperationsInput | string | null
    week?: NullableIntFieldUpdateOperationsInput | number | null
    stats_data?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameCountOutputTypeDefaultArgs instead
     */
    export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueCountOutputTypeDefaultArgs instead
     */
    export type LeagueCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameDefaultArgs instead
     */
    export type GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserGameDefaultArgs instead
     */
    export type UserGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserGameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueDefaultArgs instead
     */
    export type LeagueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueSettingDefaultArgs instead
     */
    export type LeagueSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamStandingDefaultArgs instead
     */
    export type TeamStandingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamStandingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamPlayerDefaultArgs instead
     */
    export type TeamPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamPlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerStatDefaultArgs instead
     */
    export type PlayerStatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerStatDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}