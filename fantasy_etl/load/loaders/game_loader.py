# 游戏数据加载器
#
# 迁移来源: @database_writer.py 中的游戏相关写入逻辑
# 主要映射:
#   - write_games_data() -> GameLoader.load_games()
#   - Game模型写入逻辑 -> 游戏数据加载功能
#
# 职责:
#   - 游戏数据加载：
#     * 从Transform层接收标准化的游戏数据
#     * 映射到Game模型字段：game_key、game_id、name、code等
#     * 处理游戏类型和状态：type、is_game_over、is_offseason等
#   - 数据验证和清洗：
#     * 必需字段验证：game_key、game_id、name、code、season
#     * 数据类型验证：布尔值字段的正确转换
#     * 游戏代码验证：支持的游戏类型检查
#   - 去重和冲突处理：
#     * 主键冲突处理：game_key唯一性检查
#     * 重复游戏跳过：已存在游戏的处理策略
#     * 更新vs插入：游戏信息变更时的处理
#   - 批量处理优化：
#     * 批量插入：多个游戏的高效写入
#     * 事务管理：批量操作的事务边界
#     * 错误隔离：单个游戏失败不影响整批
#   - 业务规则验证：
#     * 游戏类型过滤：只处理type='full'的游戏
#     * 赛季信息验证：season字段的合理性检查
#     * 游戏状态一致性：各状态字段的逻辑关系
#   - 关联数据处理：
#     * 为后续League数据建立基础
#     * 游戏-联盟关系的外键准备
#     * 游戏元数据的完整性保证
#   - 统计和报告：
#     * 处理统计：新增游戏数量、跳过数量
#     * 游戏类型分布：各类游戏的统计信息
#     * 加载性能指标：处理时间和成功率
#
# 输入: 标准化的游戏数据列表 (List[Dict])
# 输出: 游戏数据加载结果和统计信息 